[
  {
    "id": "Does nothing.  Preserved for backward compatibility.",
    "pattern": "Does nothing\\.  Preserved for backward compatibility\\.",
    "replacement": "不起作用。为向前兼容保留。"
  },
  {
    "id": "-A<question>=<answer>\\tAssert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>.",
    "pattern": "-A<question>=<answer>\\tAssert the <answer> to <question>\\.  Putting '-' before <question> disables the <answer> to <question>\\.",
    "replacement": "-A<问题>=<答案>\\断言<问题>的<答案>。在<问题>前加一个 '-' 将禁用其<答案>。"
  },
  {
    "id": "Do not discard comments.",
    "pattern": "Do not discard comments\\.",
    "replacement": "不丢弃注释。"
  },
  {
    "id": "Do not discard comments in macro expansions.",
    "pattern": "Do not discard comments in macro expansions\\.",
    "replacement": "展开宏时不丢弃注释。"
  },
  {
    "id": "-D<macro>[=<val>]\\tDefine a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1.",
    "pattern": "-D<macro>\\[=<val>\\]\\tDefine a <macro> with <val> as its value\\.  If just <macro> is given, <val> is taken to be 1\\.",
    "replacement": "-D<宏>[=<值>]\\t将<宏>定义为<值>。如果只给出了<宏>，值将被定为 1。"
  },
  {
    "id": "-F <dir>\\tAdd <dir> to the end of the main framework include path.",
    "pattern": "-F <dir>\\tAdd <dir> to the end of the main framework include path\\.",
    "replacement": "-F <目录>\\t将目录添加至主框架包含路径的末尾。"
  },
  {
    "id": "Enable parsing GIMPLE.",
    "pattern": "Enable parsing GIMPLE\\.",
    "replacement": "启用 GIMPLE 分析。"
  },
  {
    "id": "Print the name of header files as they are used.",
    "pattern": "Print the name of header files as they are used\\.",
    "replacement": "打印使用到的头文件名。"
  },
  {
    "id": "-I <dir>\\tAdd <dir> to the end of the main include path.",
    "pattern": "-I <dir>\\tAdd <dir> to the end of the main include path\\.",
    "replacement": "-I <目录>\\t将<目录>添加至主包含路径末尾。"
  },
  {
    "id": "Generate make dependencies.",
    "pattern": "Generate make dependencies\\.",
    "replacement": "生成 make 依赖项。"
  },
  {
    "id": "Generate make dependencies and compile.",
    "pattern": "Generate make dependencies and compile\\.",
    "replacement": "生成 make 依赖项并编译。"
  },
  {
    "id": "-MF <file>\\tWrite dependency output to the given file.",
    "pattern": "-MF <file>\\tWrite dependency output to the given file\\.",
    "replacement": "-MF <文件>\\t将依赖项输出到给定文件。"
  },
  {
    "id": "Treat missing header files as generated files.",
    "pattern": "Treat missing header files as generated files\\.",
    "replacement": "将缺失的头文件看作生成的文件。"
  },
  {
    "id": "Like -M but ignore system header files.",
    "pattern": "Like -M but ignore system header files\\.",
    "replacement": "与 -M 类似但是忽略系统头文件。"
  },
  {
    "id": "Like -MD but ignore system header files.",
    "pattern": "Like -MD but ignore system header files\\.",
    "replacement": "与 -MD 类似但是忽略系统头文件。"
  },
  {
    "id": "Generate C++ Module dependency information.",
    "pattern": "Generate C\\+\\+ Module dependency information\\.",
    "replacement": "生成 C++ 模块依赖信息。"
  },
  {
    "id": "Generate phony targets for all headers.",
    "pattern": "Generate phony targets for all headers\\.",
    "replacement": "为所有头文件生成伪目标。"
  },
  {
    "id": "-MQ <target>\\tAdd a target that may require quoting.",
    "pattern": "-MQ <target>\\tAdd a target that may require quoting\\.",
    "replacement": "-MQ <目标>\\t添加一个可能需要被括起的目标。"
  },
  {
    "id": "-MT <target>\\tAdd a target that does not require quoting.",
    "pattern": "-MT <target>\\tAdd a target that does not require quoting\\.",
    "replacement": "-MT <目标>\\t添加一个不被括起的目标。"
  },
  {
    "id": "Do not generate #line directives.",
    "pattern": "Do not generate #line directives\\.",
    "replacement": "不生成 #line 指令。"
  },
  {
    "id": "-U<macro>\\tUndefine <macro>.",
    "pattern": "-U<macro>\\tUndefine <macro>\\.",
    "replacement": "-U<宏>\\t取消定义<宏>。"
  },
  {
    "id": "Warn if the NSObject attribute is applied to a non-typedef.",
    "pattern": "Warn if the NSObject attribute is applied to a non-typedef\\.",
    "replacement": "应用 NSObject 特性到非类型定义时警告。"
  },
  {
    "id": "Warn about things that will change when compiling with an ABI-compliant compiler.",
    "pattern": "Warn about things that will change when compiling with an ABI-compliant compiler\\.",
    "replacement": "结果与 ABI 相容的编译器的编译结果不同时给出警告"
  },
  {
    "id": "Warn about things that change between the current -fabi-version and the specified version.",
    "pattern": "Warn about things that change between the current -fabi-version and the specified version\\.",
    "replacement": "当前 -fabi-version 和指定的版本不同时给出警告。"
  },
  {
    "id": "Warn if a subobject has an abi_tag attribute that the complete object type does not have.",
    "pattern": "Warn if a subobject has an abi_tag attribute that the complete object type does not have\\.",
    "replacement": "子对象有 abi_tag 特性但完整对象类型没有时给出警告。"
  },
  {
    "id": "Warn on suspicious calls of standard functions computing absolute values.",
    "pattern": "Warn on suspicious calls of standard functions computing absolute values\\.",
    "replacement": "用可疑的标准函数调用计算绝对值时给出警告。"
  },
  {
    "id": "Warn about suspicious uses of memory addresses.",
    "pattern": "Warn about suspicious uses of memory addresses\\.",
    "replacement": "使用可疑的内存地址时给出警告"
  },
  {
    "id": "Warn about 'new' of type with extended alignment without -faligned-new.",
    "pattern": "Warn about 'new' of type with extended alignment without -faligned-new\\.",
    "replacement": "没有 -faligned-new 的情况下使用类型有扩展对齐的 'new' 时给出警告。"
  },
  {
    "id": "-Waligned-new=[none|global|all]\\tWarn even if 'new' uses a class member allocation function.",
    "pattern": "-Waligned-new=\\[none\\|global\\|all\\]\\tWarn even if 'new' uses a class member allocation function\\.",
    "replacement": "-Waligned-new=\\[none\\|global\\|all\\]\\t即使 'new' 使用类成员分配函数也给出警告。"
  },
  {
    "id": "Enable most warning messages.",
    "pattern": "Enable most warning messages\\.",
    "replacement": "启用大部分警告信息。"
  },
  {
    "id": "Warn on any use of alloca.",
    "pattern": "Warn on any use of alloca\\.",
    "replacement": "使用任何 alloca 时给出警告。"
  },
  {
    "id": "-Walloc-size-larger-than=<bytes>\\tWarn for calls to allocation functions that attempt to allocate objects larger than the specified number of bytes.",
    "pattern": "-Walloc-size-larger-than=<bytes>\\tWarn for calls to allocation functions that attempt to allocate objects larger than the specified number of bytes\\.",
    "replacement": "-Walloc-size-larger-than=<字节>\\t为调用分配函数尝试分配大于指定字节数的对象时给出警告。"
  },
  {
    "id": "Disable Walloc-size-larger-than= warning.  Equivalent to Walloc-size-larger-than=<SIZE_MAX> or larger.",
    "pattern": "Disable Walloc-size-larger-than= warning\\.  Equivalent to Walloc-size-larger-than=<SIZE_MAX> or larger\\.",
    "replacement": "禁用 Walloc-size-larger-than= 警告。等价于 Walloc-size-larger-than=<SIZE_MAX> 或更大。"
  },
  {
    "id": "Warn for calls to allocation functions that specify zero bytes.",
    "pattern": "Warn for calls to allocation functions that specify zero bytes\\.",
    "replacement": "以 0 字节调用分配函数时给出警告。"
  },
  {
    "id": "-Walloca-larger-than=<number>\\tWarn on unbounded uses of alloca, and on bounded uses of alloca whose bound can be larger than <number> bytes.",
    "pattern": "-Walloca-larger-than=<number>\\tWarn on unbounded uses of alloca, and on bounded uses of alloca whose bound can be larger than <number> bytes\\.",
    "replacement": "-Walloca-larger-than=<number>\\t当使用没有边界或边界大于 <number> 字节的 alloca 时给出警告。"
  },
  {
    "id": "Disable Walloca-larger-than= warning.  Equivalent to Walloca-larger-than=<SIZE_MAX> or larger.",
    "pattern": "Disable Walloca-larger-than= warning\\.  Equivalent to Walloca-larger-than=<SIZE_MAX> or larger\\.",
    "replacement": "禁用 Walloca-larger-than= 警告。等价于 Walloca-larger-than=<SIZE_MAX> 或更大。"
  },
  {
    "id": "Warn about comparisons between two operands of array type.",
    "pattern": "Warn about comparisons between two operands of array type\\.",
    "replacement": "比较两个数组类型操作数时给出警告。"
  },
  {
    "id": "Warn about mismatched declarations of array parameters and unsafe accesses to them.",
    "pattern": "Warn about mismatched declarations of array parameters and unsafe accesses to them\\.",
    "replacement": "对不匹配的数组实参声明或不安全的数组访问给出警告。"
  },
  {
    "id": "Warn about accesses to interior zero-length array members.",
    "pattern": "Warn about accesses to interior zero-length array members\\.",
    "replacement": "对内部零长度数组成员的访问给出警告。"
  },
  {
    "id": "Warn whenever an Objective-C assignment is being intercepted by the garbage collector.",
    "pattern": "Warn whenever an Objective-C assignment is being intercepted by the garbage collector\\.",
    "replacement": "当 Objective-C 赋值可能为垃圾回收所介入时给出警告。"
  },
  {
    "id": "Warn about casting functions to incompatible types.",
    "pattern": "Warn about casting functions to incompatible types\\.",
    "replacement": "当把函数转换为不兼容类型时给出警告。"
  },
  {
    "id": "-Wbidi-chars=[none|unpaired|any|ucn] Warn about UTF-8 bidirectional control characters.",
    "pattern": "-Wbidi-chars=\\[none\\|unpaired\\|any\\|ucn\\] Warn about UTF-8 bidirectional control characters\\.",
    "replacement": "-Wbidi-chars=\\[none\\|unpaired\\|any\\|ucn\\]\\t给出 UTF-8 双向控制字符警告。"
  },
  {
    "id": "Warn about boolean expression compared with an integer value different from true/false.",
    "pattern": "Warn about boolean expression compared with an integer value different from true/false\\.",
    "replacement": "当比较布尔表达式与非 true/false 整数值时给出警告。"
  },
  {
    "id": "Warn about certain operations on boolean expressions.",
    "pattern": "Warn about certain operations on boolean expressions\\.",
    "replacement": "当操作布尔表达式时给出警告。"
  },
  {
    "id": "Warn when __builtin_frame_address or __builtin_return_address is used unsafely.",
    "pattern": "Warn when __builtin_frame_address or __builtin_return_address is used unsafely\\.",
    "replacement": "当使用不安全的 __builtin_frame_address 或 __builtin_return_address 时给出警告。"
  },
  {
    "id": "Warn when a built-in function is declared with the wrong signature.",
    "pattern": "Warn when a built-in function is declared with the wrong signature\\.",
    "replacement": "当使用错误的签名声明内建函数时给出警告。"
  },
  {
    "id": "Warn when a built-in preprocessor macro is undefined or redefined.",
    "pattern": "Warn when a built-in preprocessor macro is undefined or redefined\\.",
    "replacement": "当内建预处理宏未定义或重定义时给出警告。"
  },
  {
    "id": "Warn about features not present in ISO C11, but present in ISO C2X.",
    "pattern": "Warn about features not present in ISO C11, but present in ISO C2X\\.",
    "replacement": "对 ISO C11 中不存在但 ISO C2x 中存在的特性给出警告。"
  },
  {
    "id": "Warn about features not present in ISO C90, but present in ISO C99.",
    "pattern": "Warn about features not present in ISO C90, but present in ISO C99\\.",
    "replacement": "对 ISO C90 中不存在但 ISO C99 中存在的特性给出警告。"
  },
  {
    "id": "Warn about features not present in ISO C99, but present in ISO C11.",
    "pattern": "Warn about features not present in ISO C99, but present in ISO C11\\.",
    "replacement": "对 ISO C99 中不存在但 ISO C11 中存在的特性给出警告。"
  },
  {
    "id": "Warn about C constructs that are not in the common subset of C and C++.",
    "pattern": "Warn about C constructs that are not in the common subset of C and C\\+\\+\\.",
    "replacement": "对不处于 C 和 C++ 公共交集内的 C 构造时给出警告。"
  },
  {
    "id": "Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011.",
    "pattern": "Warn about C\\+\\+ constructs whose meaning differs between ISO C\\+\\+ 1998 and ISO C\\+\\+ 2011\\.",
    "replacement": "对 ISO C++ 1998 和 ISO C++ 2011 中含义不同的 C++ 构造给出警告。"
  },
  {
    "id": "Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.",
    "pattern": "Warn about C\\+\\+ constructs whose meaning differs between ISO C\\+\\+ 2011 and ISO C\\+\\+ 2014\\.",
    "replacement": "对 ISO C++ 2011 和 ISO C++ 2014 中含义不同的 C++ 构造给出警告。"
  },
  {
    "id": "Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.",
    "pattern": "Warn about C\\+\\+ constructs whose meaning differs between ISO C\\+\\+ 2014 and ISO C\\+\\+ 2017\\.",
    "replacement": "对 ISO C++ 2014 和 ISO C++ 2017 中含义不同的 C++ 构造给出警告。"
  },
  {
    "id": "Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.",
    "pattern": "Warn about C\\+\\+ constructs whose meaning differs between ISO C\\+\\+ 2017 and ISO C\\+\\+ 2020\\.",
    "replacement": "对 ISO C++ 2017 和 ISO C++ 2020 中含义不同的 C++ 构造给出警告。"
  },
  {
    "id": "Warn about C++11 constructs in code compiled with an older standard.",
    "pattern": "Warn about C\\+\\+11 constructs in code compiled with an older standard\\.",
    "replacement": "当使用较旧的标准编译代码中的 C++11 构造时给出警告。"
  },
  {
    "id": "Warn about C++14 constructs in code compiled with an older standard.",
    "pattern": "Warn about C\\+\\+14 constructs in code compiled with an older standard\\.",
    "replacement": "当使用较旧的标准编译代码中的 C++14 构造时给出警告。"
  },
  {
    "id": "Warn about C++17 constructs in code compiled with an older standard.",
    "pattern": "Warn about C\\+\\+17 constructs in code compiled with an older standard\\.",
    "replacement": "当使用较旧的标准编译代码中的 C++17 构造时给出警告。"
  },
  {
    "id": "Warn about C++20 constructs in code compiled with an older standard.",
    "pattern": "Warn about C\\+\\+20 constructs in code compiled with an older standard\\.",
    "replacement": "当使用较旧的标准编译代码中的 C++20 构造时给出警告。"
  },
  {
    "id": "Warn about C++23 constructs in code compiled with an older standard.",
    "pattern": "Warn about C\\+\\+23 constructs in code compiled with an older standard\\.",
    "replacement": "当使用较旧的标准编译代码中的 C++23 构造时给出警告。"
  },
  {
    "id": "Warn about casts between incompatible function types.",
    "pattern": "Warn about casts between incompatible function types\\.",
    "replacement": "对不兼容的函数类型之间的转换给出警告。"
  },
  {
    "id": "Warn about casts which discard qualifiers.",
    "pattern": "Warn about casts which discard qualifiers\\.",
    "replacement": "当类型转换丢失限定信息时给出警告。"
  },
  {
    "id": "Warn about catch handlers of non-reference type.",
    "pattern": "Warn about catch handlers of non-reference type\\.",
    "replacement": "当捕获的处理器类型不是引用类型时给出警告。"
  },
  {
    "id": "Warn about subscripts whose type is \\\"char\\\".",
    "pattern": "Warn about subscripts whose type is \"char\"\\.",
    "replacement": "当下标类型为 \"char\" 时给出警告。"
  },
  {
    "id": "Removed in GCC 9.  This switch has no effect.",
    "pattern": "Removed in GCC 9\\.  This switch has no effect\\.",
    "replacement": "GCC 9 中移除。此开关不起作用。"
  },
  {
    "id": "Warn about variables that might be changed by \\\"longjmp\\\" or \\\"vfork\\\".",
    "pattern": "Warn about variables that might be changed by \"longjmp\" or \"vfork\"\\.",
    "replacement": "对能被 \"longjmp\" 或 \"vfork\" 所篡改的变量给出警告。"
  },
  {
    "id": "Warn about uses of a comma operator within a subscripting expression.",
    "pattern": "Warn about uses of a comma operator within a subscripting expression\\.",
    "replacement": "当下标表达式中使用逗号运算符时给出警告。"
  },
  {
    "id": "Warn about possibly nested block comments, and C++ comments spanning more than one physical line.",
    "pattern": "Warn about possibly nested block comments, and C\\+\\+ comments spanning more than one physical line\\.",
    "replacement": "对可能嵌套的注释和长度超过一个物理行长的 C++ 注释给出警告。"
  },
  {
    "id": "Synonym for -Wcomment.",
    "pattern": "Synonym for -Wcomment\\.",
    "replacement": "-Wcomment 的同义词。"
  },
  {
    "id": "Warn for conditionally-supported constructs.",
    "pattern": "Warn for conditionally-supported constructs\\.",
    "replacement": "对有条件支持的结构体给出警告。"
  },
  {
    "id": "Warn for implicit type conversions that may change a value.",
    "pattern": "Warn for implicit type conversions that may change a value\\.",
    "replacement": "当隐式类型转换可能改变值时给出警告。"
  },
  {
    "id": "Warn for converting NULL from/to a non-pointer type.",
    "pattern": "Warn for converting NULL from/to a non-pointer type\\.",
    "replacement": "将 NULL 转换为非指针类型，或自其转换时给出警告。"
  },
  {
    "id": "Warn when performing class template argument deduction on a type with no deduction guides.",
    "pattern": "Warn when performing class template argument deduction on a type with no deduction guides\\.",
    "replacement": "当对没有推导指引的类模板实参进行推导时给出警告。"
  },
  {
    "id": "Warn when all constructors and destructors are private.",
    "pattern": "Warn when all constructors and destructors are private\\.",
    "replacement": "当所有构造函数和析构函数都是私有时给出警告。"
  },
  {
    "id": "Warn about dangling else.",
    "pattern": "Warn about dangling else\\.",
    "replacement": "对悬垂 else 给出警告。"
  },
  {
    "id": "Warn for uses of pointers to auto variables whose lifetime has ended.",
    "pattern": "Warn for uses of pointers to auto variables whose lifetime has ended\\.",
    "replacement": "当使用指向自动变量的指针，且该变量生存期已结束时给出警告。"
  },
  {
    "id": "Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage.",
    "pattern": "Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage\\.",
    "replacement": "当使用 __TIME__、__DATE__ 和 __TIMESTAMP__ 时给出警告。"
  },
  {
    "id": "Warn when a declaration is found after a statement.",
    "pattern": "Warn when a declaration is found after a statement\\.",
    "replacement": "当声明出现在语句后时给出警告。"
  },
  {
    "id": "Warn when deleting a pointer to incomplete type.",
    "pattern": "Warn when deleting a pointer to incomplete type\\.",
    "replacement": "当删除指向不完整类型的指针时给出警告。"
  },
  {
    "id": "Warn about deleting polymorphic objects with non-virtual destructors.",
    "pattern": "Warn about deleting polymorphic objects with non-virtual destructors\\.",
    "replacement": "当删除带有非虚析构函数的多态对象时给出警告。"
  },
  {
    "id": "Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation.",
    "pattern": "Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation\\.",
    "replacement": "当类有用户提供的复制操作时，隐式声明的复制操作被弃用。"
  },
  {
    "id": "Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation or destructor.",
    "pattern": "Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation or destructor\\.",
    "replacement": "当类有用户提供的复制操作或析构函数时，隐式声明的复制操作被弃用。"
  },
  {
    "id": "Warn about deprecated arithmetic conversions on operands of enumeration types.",
    "pattern": "Warn about deprecated arithmetic conversions on operands of enumeration types\\.",
    "replacement": "对操作数为枚举类型的算术类型转换这一弃用行为给出警告。"
  },
  {
    "id": "Warn about deprecated arithmetic conversions on operands where one is of enumeration type and the other is of a floating-point type.",
    "pattern": "Warn about deprecated arithmetic conversions on operands where one is of enumeration type and the other is of a floating-point type\\.",
    "replacement": "对操作数中一个为枚举类型，另一个为浮点类型的算术类型转换这一弃用行为给出警告。"
  },
  {
    "id": "Warn about positional initialization of structs requiring designated initializers.",
    "pattern": "Warn about positional initialization of structs requiring designated initializers\\.",
    "replacement": "对需要指派初始化器的部分初始化结构体给出警告"
  },
  {
    "id": "Warn if qualifiers on arrays which are pointer targets are discarded.",
    "pattern": "Warn if qualifiers on arrays which are pointer targets are discarded\\.",
    "replacement": "当指针类型构成的数组上的限定符被丢弃时给出警告。"
  },
  {
    "id": "Warn if type qualifiers on pointers are discarded.",
    "pattern": "Warn if type qualifiers on pointers are discarded\\.",
    "replacement": "当指针上的类型限定符被丢弃时给出警告。"
  },
  {
    "id": "Warn about compile-time integer division by zero.",
    "pattern": "Warn about compile-time integer division by zero\\.",
    "replacement": "对编译时除以零操作给出警告"
  },
  {
    "id": "Warn about duplicated branches in if-else statements.",
    "pattern": "Warn about duplicated branches in if-else statements\\.",
    "replacement": "当 if-else 语句中出现重复的分支时给出警告。"
  },
  {
    "id": "Warn about duplicated conditions in an if-else-if chain.",
    "pattern": "Warn about duplicated conditions in an if-else-if chain\\.",
    "replacement": "当 if-else-if 链中出现重复的条件时给出警告。"
  },
  {
    "id": "Warn about violations of Effective C++ style rules.",
    "pattern": "Warn about violations of Effective C\\+\\+ style rules\\.",
    "replacement": "对不遵循《Effetive C++》的风格给出警告。"
  },
  {
    "id": "Warn about an empty body in an if or else statement.",
    "pattern": "Warn about an empty body in an if or else statement\\.",
    "replacement": "当 if 或 else 语句体为空时给出警告。"
  },
  {
    "id": "Warn about stray tokens after #else and #endif.",
    "pattern": "Warn about stray tokens after #else and #endif\\.",
    "replacement": "对 #else 和 #endif 后出现的游离字符给出警告。"
  },
  {
    "id": "Warn about comparison of different enum types.",
    "pattern": "Warn about comparison of different enum types\\.",
    "replacement": "对不同枚举类型之间的比较给出警告。"
  },
  {
    "id": "Warn about implicit conversion of enum types.",
    "pattern": "Warn about implicit conversion of enum types\\.",
    "replacement": "对枚举类型的隐式转换给出警告。"
  },
  {
    "id": "This switch is deprecated; use -Werror=implicit-function-declaration instead.",
    "pattern": "This switch is deprecated; use -Werror=implicit-function-declaration instead\\.",
    "replacement": "已弃用此开关；请改用 -Werror=implicit-function-declaration。"
  },
  {
    "id": "Warn when an exception handler is shadowed by another handler.",
    "pattern": "Warn when an exception handler is shadowed by another handler\\.",
    "replacement": "当异常处理器被另一个处理器覆盖时给出警告。"
  },
  {
    "id": "Warn about semicolon after in-class function definition.",
    "pattern": "Warn about semicolon after in-class function definition\\.",
    "replacement": "当在类中函数定义中出现分号时给出警告。"
  },
  {
    "id": "Warn for implicit type conversions that cause loss of floating point precision.",
    "pattern": "Warn for implicit type conversions that cause loss of floating point precision\\.",
    "replacement": "当隐式类型转换导致浮点数精度丢失时给出警告。"
  },
  {
    "id": "Warn if testing floating point numbers for equality.",
    "pattern": "Warn if testing floating point numbers for equality\\.",
    "replacement": "当比较浮点数是否相等时给出警告。"
  },
  {
    "id": "Warn about printf/scanf/strftime/strfmon format string anomalies.",
    "pattern": "Warn about printf/scanf/strftime/strfmon format string anomalies\\.",
    "replacement": "对 printf/scanf/strftime/strfmon 中的格式字符串异常给出警告。"
  },
  {
    "id": "Warn about format strings that contain NUL bytes.",
    "pattern": "Warn about format strings that contain NUL bytes\\.",
    "replacement": "当格式字符串包含 NUL 字节时给出警告。"
  },
  {
    "id": "Warn about GCC format strings with strings unsuitable for diagnostics.",
    "pattern": "Warn about GCC format strings with strings unsuitable for diagnostics\\.",
    "replacement": "当 GCC 格式字符串中包含不适合诊断的字符串时给出警告。"
  },
  {
    "id": "Warn if passing too many arguments to a function for its format string.",
    "pattern": "Warn if passing too many arguments to a function for its format string\\.",
    "replacement": "当传递给格式字符串对应函数过多的实参时给出警告。"
  },
  {
    "id": "Warn about format strings that are not literals.",
    "pattern": "Warn about format strings that are not literals\\.",
    "replacement": "当格式字符串不是字面量时给出警告。"
  },
  {
    "id": "Warn about function calls with format strings that write past the end of the destination region.  Same as -Wformat-overflow=1.",
    "pattern": "Warn about function calls with format strings that write past the end of the destination region\\.  Same as -Wformat-overflow=1\\.",
    "replacement": "若格式字符串对应函数被调用时写入目标区域超出范围，则给出警告。与 -Wformat-overflow=1 相同。"
  },
  {
    "id": "Warn about possible security problems with format functions.",
    "pattern": "Warn about possible security problems with format functions\\.",
    "replacement": "当使用格式字符串的函数可能导致安全问题时给出警告。"
  },
  {
    "id": "Warn about sign differences with format functions.",
    "pattern": "Warn about sign differences with format functions\\.",
    "replacement": "当格式函数的符号与格式字符串中的符号不同时给出警告。"
  },
  {
    "id": "Warn about calls to snprintf and similar functions that truncate output. Same as -Wformat-truncation=1.",
    "pattern": "Warn about calls to snprintf and similar functions that truncate output\\. Same as -Wformat-truncation=1\\.",
    "replacement": "当调用 snprintf 等输出会被截断的函数时给出警告。与 -Wformat-truncation=1 相同。"
  },
  {
    "id": "Warn about strftime formats yielding 2-digit years.",
    "pattern": "Warn about strftime formats yielding 2-digit years\\.",
    "replacement": "当 strftime 格式给出 2 位记年时给出警告。"
  },
  {
    "id": "Warn about zero-length formats.",
    "pattern": "Warn about zero-length formats\\.",
    "replacement": "对长度为 0 的格式字符串给出警告。"
  },
  {
    "id": "Warn about function calls with format strings that write past the end of the destination region.",
    "pattern": "Warn about function calls with format strings that write past the end of the destination region\\.",
    "replacement": "当格式字符串对应函数被调用时写入目标区域超出范围时给出警告。"
  },
  {
    "id": "Warn about calls to snprintf and similar functions that truncate output.",
    "pattern": "Warn about calls to snprintf and similar functions that truncate output\\.",
    "replacement": "当调用 snprintf 等输出会被截断的函数时给出警告。"
  },
  {
    "id": "Warn when the field in a struct is not aligned.",
    "pattern": "Warn when the field in a struct is not aligned\\.",
    "replacement": "当结构体中的字段不对齐时给出警告。"
  },
  {
    "id": "Warn whenever type qualifiers are ignored.",
    "pattern": "Warn whenever type qualifiers are ignored\\.",
    "replacement": "当类型限定符被忽略时给出警告。"
  },
  {
    "id": "Warn whenever attributes are ignored.",
    "pattern": "Warn whenever attributes are ignored\\.",
    "replacement": "当忽略特性时给出警告。"
  },
  {
    "id": "Warn when a base is inaccessible in derived due to ambiguity.",
    "pattern": "Warn when a base is inaccessible in derived due to ambiguity\\.",
    "replacement": "当基类由于歧义性而不能被访问时给出警告。"
  },
  {
    "id": "Warn when there is a conversion between pointers that have incompatible types.",
    "pattern": "Warn when there is a conversion between pointers that have incompatible types\\.",
    "replacement": "当存在不兼容指针类型之间的转换时给出警告。"
  },
  {
    "id": "Warn for infinitely recursive calls.",
    "pattern": "Warn for infinitely recursive calls\\.",
    "replacement": "当函数调用无限递归时给出警告。"
  },
  {
    "id": "Warn when the address of packed member of struct or union is taken.",
    "pattern": "Warn when the address of packed member of struct or union is taken\\.",
    "replacement": "当对结构体或联合中的紧凑型成员取地址时给出警告。"
  },
  {
    "id": "Warn about variables which are initialized to themselves.",
    "pattern": "Warn about variables which are initialized to themselves\\.",
    "replacement": "对初始化为自身的变量给出警告。"
  },
  {
    "id": "Warn about uses of std::initializer_list that can result in dangling pointers.",
    "pattern": "Warn about uses of std::initializer_list that can result in dangling pointers\\.",
    "replacement": "当使用 std::initializer_list 导致悬空指针时给出警告。"
  },
  {
    "id": "Warn about nonsensical values of --param destructive-interference-size or constructive-interference-size.",
    "pattern": "Warn about nonsensical values of --param destructive-interference-size or constructive-interference-size\\.",
    "replacement": "当 --param destructive-interference-size 或 constructive-interference-size 的值不合理时给出警告。"
  },
  {
    "id": "Warn about implicit declarations.",
    "pattern": "Warn about implicit declarations\\.",
    "replacement": "对隐式声明给出警告。"
  },
  {
    "id": "Warn about implicit conversions from \\\"float\\\" to \\\"double\\\".",
    "pattern": "Warn about implicit conversions from \"float\" to \"double\"\\.",
    "replacement": "对从 \"float\" 到 \"double\" 的隐式转换给出警告"
  },
  {
    "id": "Warn if \\\"defined\\\" is used outside #if.",
    "pattern": "Warn if \"defined\" is used outside #if\\.",
    "replacement": "当 \"defined\" 被用在 #if 块外时给出警告。"
  },
  {
    "id": "Warn about implicit function declarations.",
    "pattern": "Warn about implicit function declarations\\.",
    "replacement": "对隐式函数声明给出警告。"
  },
  {
    "id": "Warn when a declaration does not specify a type.",
    "pattern": "Warn when a declaration does not specify a type\\.",
    "replacement": "当声明未指定类型时给出警告。"
  },
  {
    "id": "Warn about C++11 inheriting constructors when the base has a variadic constructor.",
    "pattern": "Warn about C\\+\\+11 inheriting constructors when the base has a variadic constructor\\.",
    "replacement": "基类有变长构造函数时，对 C++11 继承构造函数给出警告。"
  },
  {
    "id": "Warn about incompatible integer to pointer and pointer to integer conversions.",
    "pattern": "Warn about incompatible integer to pointer and pointer to integer conversions\\.",
    "replacement": "对指针到不兼容整数类型的转换给出警告。"
  },
  {
    "id": "Warn for suspicious integer expressions in boolean context.",
    "pattern": "Warn for suspicious integer expressions in boolean context\\.",
    "replacement": "对布尔语境中的可疑整数表达式给出警告。"
  },
  {
    "id": "Warn when there is a cast to a pointer from an integer of a different size.",
    "pattern": "Warn when there is a cast to a pointer from an integer of a different size\\.",
    "replacement": "当将一个大小不同的整数转换为指针时给出警告。"
  },
  {
    "id": "Warn about invalid uses of the \\\"offsetof\\\" macro.",
    "pattern": "Warn about invalid uses of the \"offsetof\" macro\\.",
    "replacement": "当使用无效的 \"offsetof\" 时给出警告。"
  },
  {
    "id": "Warn about PCH files that are found but not used.",
    "pattern": "Warn about PCH files that are found but not used\\.",
    "replacement": "对被找到但未使用的 PCH 文件给出警告。"
  },
  {
    "id": "Warn when a jump misses a variable initialization.",
    "pattern": "Warn when a jump misses a variable initialization\\.",
    "replacement": "当跳转略过变量初始化时给出警告。"
  },
  {
    "id": "Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.",
    "pattern": "Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore\\.",
    "replacement": "当字符串或字符字面量带有用户定义后缀，且该后缀不以下划线开头时给出警告。"
  },
  {
    "id": "Warn when a logical operator is suspiciously always evaluating to true or false.",
    "pattern": "Warn when a logical operator is suspiciously always evaluating to true or false\\.",
    "replacement": "当逻辑运算符可疑地总是求值为 true 或 false 时给出警告"
  },
  {
    "id": "Warn when logical not is used on the left hand side operand of a comparison.",
    "pattern": "Warn when logical not is used on the left hand side operand of a comparison\\.",
    "replacement": "当逻辑非被用于比较操作数左侧操作数时给出警告。"
  },
  {
    "id": "Do not warn about using \\\"long long\\\" when -pedantic.",
    "pattern": "Do not warn about using \"long long\" when -pedantic\\.",
    "replacement": "当使用 -pedantic 时不对 \"long long\" 给出警告。"
  },
  {
    "id": "Warn about suspicious declarations of \\\"main\\\".",
    "pattern": "Warn about suspicious declarations of \"main\"\\.",
    "replacement": "对可疑的 \"main\" 声明给出警告。"
  },
  {
    "id": "Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.",
    "pattern": "Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not\\.",
    "replacement": "当调用可疑的 memset（其中第三个实参为常量零，而第二个实参不是）时给出警告。"
  },
  {
    "id": "Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.",
    "pattern": "Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size\\.",
    "replacement": "当调用可疑的 memset（其中第三个实参包含元素数量，而没有乘以元素大小）时给出警告。"
  },
  {
    "id": "Warn when the indentation of the code does not reflect the block structure.",
    "pattern": "Warn when the indentation of the code does not reflect the block structure\\.",
    "replacement": "当代码缩进不符合块结构时给出警告。"
  },
  {
    "id": "Warn for deallocation calls with arguments returned from mismatched allocation functions.",
    "pattern": "Warn for deallocation calls with arguments returned from mismatched allocation functions\\.",
    "replacement": "当解分配函数的实参返回自不匹配的分配函数时给出警告。"
  },
  {
    "id": "Warn for mismatches between calls to operator new or delete and the corresponding call to the allocation or deallocation function.",
    "pattern": "Warn for mismatches between calls to operator new or delete and the corresponding call to the allocation or deallocation function\\.",
    "replacement": "当 operator new 或 delete 的调用与相应的分配或解分配函数的调用不匹配时给出警告。"
  },
  {
    "id": "Warn when a class is redeclared or referenced using a mismatched class-key.",
    "pattern": "Warn when a class is redeclared or referenced using a mismatched class-key\\.",
    "replacement": "当类使用不匹配的类关键字重新声明或引用时给出警告。"
  },
  {
    "id": "Warn about possibly missing braces around initializers.",
    "pattern": "Warn about possibly missing braces around initializers\\.",
    "replacement": "对可能缺少花括号的初始化器给出警告。"
  },
  {
    "id": "Warn about global functions without previous declarations.",
    "pattern": "Warn about global functions without previous declarations\\.",
    "replacement": "当全局函数没有前置声明时给出警告"
  },
  {
    "id": "Warn about missing fields in struct initializers.",
    "pattern": "Warn about missing fields in struct initializers\\.",
    "replacement": "当结构体初始化器中缺少字段时给出警告。"
  },
  {
    "id": "Warn about likely missing requires keyword.",
    "pattern": "Warn about likely missing requires keyword\\.",
    "replacement": "当可能缺少 requires 关键字时给出警告。"
  },
  {
    "id": "Warn when the template keyword is missing after a member access token in a dependent member access expression if that member is a template.",
    "pattern": "Warn when the template keyword is missing after a member access token in a dependent member access expression if that member is a template\\.",
    "replacement": "当成员访问表达式中成员访问符后缺少 template 关键字，且该成员是模板时给出警告。"
  },
  {
    "id": "Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for.",
    "pattern": "Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for\\.",
    "replacement": "当宏定义展开为多个语句，并且用作 if、else、while、switch 或 for 等语句的子句时给出警告。"
  },
  {
    "id": "Warn on direct multiple inheritance.",
    "pattern": "Warn on direct multiple inheritance\\.",
    "replacement": "对直接多重继承给出警告。"
  },
  {
    "id": "Warn on namespace definition.",
    "pattern": "Warn on namespace definition\\.",
    "replacement": "对命名空间定义给出警告。"
  },
  {
    "id": "Warn when fields in a struct with the packed attribute are misaligned.",
    "pattern": "Warn when fields in a struct with the packed attribute are misaligned\\.",
    "replacement": "当带有 packed 属性的结构体字段不对齐时给出警告。"
  },
  {
    "id": "Warn when a range-based for-loop is creating unnecessary copies.",
    "pattern": "Warn when a range-based for-loop is creating unnecessary copies\\.",
    "replacement": "当基于范围的 for 循环创建不必要的副本时给出警告。"
  },
  {
    "id": "Warn when a class or enumerated type is referenced using a redundant class-key.",
    "pattern": "Warn when a class or enumerated type is referenced using a redundant class-key\\.",
    "replacement": "当使用类或枚举类型时出现多余的类关键字时给出警告。"
  },
  {
    "id": "Warn about missing sized deallocation functions.",
    "pattern": "Warn about missing sized deallocation functions\\.",
    "replacement": "对缺少大小的解分配函数给出警告。"
  },
  {
    "id": "Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.",
    "pattern": "Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers\\.",
    "replacement": "对两个 sizeof 表达式的可疑的除法（对于指针不能正确工作）给出警告。"
  },
  {
    "id": "Warn about divisions of two sizeof operators when the first one is applied to an array and the divisor does not equal the size of the array element.",
    "pattern": "Warn about divisions of two sizeof operators when the first one is applied to an array and the divisor does not equal the size of the array element\\.",
    "replacement": "当两个 sizeof 表达式做除法，其中第一个 sizeof 表达式应用于数组但除数不等于数组元素的大小时给出警告。"
  },
  {
    "id": "Warn about suspicious length parameters to certain string functions if the argument uses sizeof.",
    "pattern": "Warn about suspicious length parameters to certain string functions if the argument uses sizeof\\.",
    "replacement": "当某些字符串函数的长度形参传入了可疑的 sizeof 作为实参时给出警告。"
  },
  {
    "id": "Warn when sizeof is applied on a parameter declared as an array.",
    "pattern": "Warn when sizeof is applied on a parameter declared as an array\\.",
    "replacement": "当 sizeof 被应用于声明为数组的形参时给出警告。"
  },
  {
    "id": "Warn about calls to strcmp and strncmp used in equality expressions that are necessarily true or false due to the length of one and size of the other argument.",
    "pattern": "Warn about calls to strcmp and strncmp used in equality expressions that are necessarily true or false due to the length of one and size of the other argument\\.",
    "replacement": ""
  },
  {
    "id": "Warn about buffer overflow in string manipulation functions like memcpy and strcpy.",
    "pattern": "Warn about buffer overflow in string manipulation functions like memcpy and strcpy\\.",
    "replacement": ""
  },
  {
    "id": "Under the control of Object Size type, warn about buffer overflow in string manipulation functions like memcpy and strcpy.",
    "pattern": "Under the control of Object Size type, warn about buffer overflow in string manipulation functions like memcpy and strcpy\\.",
    "replacement": ""
  },
  {
    "id": "Warn about reading past the end of a source array in string manipulation functions like memchr and memcpy.",
    "pattern": "Warn about reading past the end of a source array in string manipulation functions like memchr and memcpy\\.",
    "replacement": ""
  },
  {
    "id": "Warn about truncation in string manipulation functions like strncat and strncpy.",
    "pattern": "Warn about truncation in string manipulation functions like strncat and strncpy\\.",
    "replacement": ""
  },
  {
    "id": "Warn about functions which might be candidates for format attributes.",
    "pattern": "Warn about functions which might be candidates for format attributes\\.",
    "replacement": "当函数可能是 format 属性的备选时给出警告"
  },
  {
    "id": "Suggest that the override keyword be used when the declaration of a virtual function overrides another.",
    "pattern": "Suggest that the override keyword be used when the declaration of a virtual function overrides another\\.",
    "replacement": ""
  },
  {
    "id": "Warn about enumerated switches, with no default, missing a case.",
    "pattern": "Warn about enumerated switches, with no default, missing a case\\.",
    "replacement": "当使用枚举类型作为开关变量，没有提供 default 分支，但又缺少某个 case 时给出警告"
  },
  {
    "id": "Warn about enumerated switches missing a \\\"default:\\\" statement.",
    "pattern": "Warn about enumerated switches missing a \"default:\" statement\\.",
    "replacement": "当使用枚举类型作为开关变量，但没有提供“default”分支时给出警告"
  },
  {
    "id": "Warn about all enumerated switches missing a specific case.",
    "pattern": "Warn about all enumerated switches missing a specific case\\.",
    "replacement": "当使用枚举类型作为开关变量但又缺少某个 case 时给出警告"
  },
  {
    "id": "Warn about switches with boolean controlling expression.",
    "pattern": "Warn about switches with boolean controlling expression\\.",
    "replacement": "对被截断的字符表达式给出警告"
  },
  {
    "id": "Warn about switch values that are outside of the switch's type range.",
    "pattern": "Warn about switch values that are outside of the switch's type range\\.",
    "replacement": ""
  },
  {
    "id": "Warn on primary template declaration.",
    "pattern": "Warn on primary template declaration\\.",
    "replacement": "对于模板声明%q+D"
  },
  {
    "id": "Warn about declarations of entities that may be missing attributes that related entities have been declared with.",
    "pattern": "Warn about declarations of entities that may be missing attributes that related entities have been declared with\\.",
    "replacement": ""
  },
  {
    "id": "Warn about user-specified include directories that do not exist.",
    "pattern": "Warn about user-specified include directories that do not exist\\.",
    "replacement": "当用户给定的包含目录不存在时给出警告"
  },
  {
    "id": "Warn about function parameters declared without a type specifier in K&R-style functions.",
    "pattern": "Warn about function parameters declared without a type specifier in K&R-style functions\\.",
    "replacement": "K&R 风格函数参数声明中未指定类型限定符时给出警告"
  },
  {
    "id": "Warn about global functions without prototypes.",
    "pattern": "Warn about global functions without prototypes\\.",
    "replacement": "全局函数没有原型时给出警告"
  },
  {
    "id": "Warn about use of multi-character character constants.",
    "pattern": "Warn about use of multi-character character constants\\.",
    "replacement": "使用多字节字符集的字符常量时给出警告"
  },
  {
    "id": "Warn about narrowing conversions within { } that are ill-formed in C++11.",
    "pattern": "Warn about narrowing conversions within \\{ \\} that are ill-formed in C\\+\\+11\\.",
    "replacement": "警告关于 narrowing 转换在之内 {} 所不当形式的在中 C++11"
  },
  {
    "id": "Warn about \\\"extern\\\" declarations not at file scope.",
    "pattern": "Warn about \"extern\" declarations not at file scope\\.",
    "replacement": "当“extern”声明不在文件作用域时给出警告"
  },
  {
    "id": "Warn when a noexcept expression evaluates to false even though the expression can't actually throw.",
    "pattern": "Warn when a noexcept expression evaluates to false even though the expression can't actually throw\\.",
    "replacement": "警告时 noexcept 运算式评估到假甚至虽然运算式无法实际的丢掷"
  },
  {
    "id": "Warn if C++17 noexcept function type will change the mangled name of a symbol.",
    "pattern": "Warn if C\\+\\+17 noexcept function type will change the mangled name of a symbol\\.",
    "replacement": ""
  },
  {
    "id": "Warn when non-templatized friend functions are declared within a template.",
    "pattern": "Warn when non-templatized friend functions are declared within a template\\.",
    "replacement": "在模板内声明未模板化的友元函数时给出警告"
  },
  {
    "id": "Warn when a conversion function will never be called due to the type it converts to.",
    "pattern": "Warn when a conversion function will never be called due to the type it converts to\\.",
    "replacement": "向 void 的转换永远不会用到类型转换运算符"
  },
  {
    "id": "Warn for unsafe raw memory writes to objects of class types.",
    "pattern": "Warn for unsafe raw memory writes to objects of class types\\.",
    "replacement": ""
  },
  {
    "id": "Warn about non-virtual destructors.",
    "pattern": "Warn about non-virtual destructors\\.",
    "replacement": "当析构函数不是虚函数时给出警告"
  },
  {
    "id": "Warn about NULL being passed to argument slots marked as requiring non-NULL.",
    "pattern": "Warn about NULL being passed to argument slots marked as requiring non-NULL\\.",
    "replacement": "当将 NULL 传递给需要非 NULL 的参数的函数时给出警告"
  },
  {
    "id": "-Wnormalized=[none|id|nfc|nfkc]\\tWarn about non-normalized Unicode strings.",
    "pattern": "-Wnormalized=\\[none\\|id\\|nfc\\|nfkc\\]\\tWarn about non-normalized Unicode strings\\.",
    "replacement": "-Wnormalized=<id|nfc|nfkc>\\t对未归一化的 Unicode 字符串给出警告"
  },
  {
    "id": "Warn if a class interface has no superclass.  Root classes may use an attribute to suppress this warning.",
    "pattern": "Warn if a class interface has no superclass\\.  Root classes may use an attribute to suppress this warning\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a C-style cast is used in a program.",
    "pattern": "Warn if a C-style cast is used in a program\\.",
    "replacement": "程序使用 C 风格的类型转换时给出警告"
  },
  {
    "id": "Warn for obsolescent usage in a declaration.",
    "pattern": "Warn for obsolescent usage in a declaration\\.",
    "replacement": "对声明中的过时用法给出警告"
  },
  {
    "id": "Warn if an old-style parameter definition is used.",
    "pattern": "Warn if an old-style parameter definition is used\\.",
    "replacement": "使用旧式形参定义时给出警告"
  },
  {
    "id": "Warn about potentially suboptimal choices related to OpenACC parallelism.",
    "pattern": "Warn about potentially suboptimal choices related to OpenACC parallelism\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a simd directive is overridden by the vectorizer cost model.",
    "pattern": "Warn if a simd directive is overridden by the vectorizer cost model\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a string is longer than the maximum portable length specified by the standard.",
    "pattern": "Warn if a string is longer than the maximum portable length specified by the standard\\.",
    "replacement": "当字符串长度超过标准规定的可移植的最大长度时给出警告"
  },
  {
    "id": "Warn about overloaded virtual function names.",
    "pattern": "Warn about overloaded virtual function names\\.",
    "replacement": "重载虚函数名时给出警告"
  },
  {
    "id": "Warn about overriding initializers without side effects.",
    "pattern": "Warn about overriding initializers without side effects\\.",
    "replacement": "覆盖无副作用的初始值设定时给出警告"
  },
  {
    "id": "Warn about overriding initializers with side effects.",
    "pattern": "Warn about overriding initializers with side effects\\.",
    "replacement": "覆盖无副作用的初始值设定时给出警告"
  },
  {
    "id": "Warn about packed bit-fields whose offset changed in GCC 4.4.",
    "pattern": "Warn about packed bit-fields whose offset changed in GCC 4\\.4\\.",
    "replacement": "当紧实位段的偏移量因 GCC 4.4 而改变时给出警告"
  },
  {
    "id": "Warn about possibly missing parentheses.",
    "pattern": "Warn about possibly missing parentheses\\.",
    "replacement": "可能缺少括号的情况下给出警告"
  },
  {
    "id": "Warn about calling std::move on a local object in a return statement preventing copy elision.",
    "pattern": "Warn about calling std::move on a local object in a return statement preventing copy elision\\.",
    "replacement": ""
  },
  {
    "id": "Warn when converting the type of pointers to member functions.",
    "pattern": "Warn when converting the type of pointers to member functions\\.",
    "replacement": "当改变成员函数指针的类型时给出警告"
  },
  {
    "id": "Warn about function pointer arithmetic.",
    "pattern": "Warn about function pointer arithmetic\\.",
    "replacement": "当在算术表达式中使用函数指针时给出警告"
  },
  {
    "id": "Warn when a pointer differs in signedness in an assignment.",
    "pattern": "Warn when a pointer differs in signedness in an assignment\\.",
    "replacement": "赋值时如指针符号不一致则给出警告"
  },
  {
    "id": "Warn when a pointer is compared with a zero character constant.",
    "pattern": "Warn when a pointer is compared with a zero character constant\\.",
    "replacement": "使用多字节字符集的字符常量时给出警告"
  },
  {
    "id": "Warn when a pointer is cast to an integer of a different size.",
    "pattern": "Warn when a pointer is cast to an integer of a different size\\.",
    "replacement": "将一个指针转换为大小不同的整数时给出警告"
  },
  {
    "id": "Warn about misuses of pragmas.",
    "pattern": "Warn about misuses of pragmas\\.",
    "replacement": "对错误使用的 pragma 加以警告"
  },
  {
    "id": "Warn if constructor or destructors with priorities from 0 to 100 are used.",
    "pattern": "Warn if constructor or destructors with priorities from 0 to 100 are used\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a property for an Objective-C object has no assign semantics specified.",
    "pattern": "Warn if a property for an Objective-C object has no assign semantics specified\\.",
    "replacement": "警告如果内容用于 Objective-C 对象没有任何指派语意指定的"
  },
  {
    "id": "Warn if inherited methods are unimplemented.",
    "pattern": "Warn if inherited methods are unimplemented\\.",
    "replacement": "当继承来的方法未被实现时给出警告"
  },
  {
    "id": "Warn for placement new expressions with undefined behavior.",
    "pattern": "Warn for placement new expressions with undefined behavior\\.",
    "replacement": ""
  },
  {
    "id": "Warn about multiple declarations of the same object.",
    "pattern": "Warn about multiple declarations of the same object\\.",
    "replacement": "对同一个对象多次声明时给出警告"
  },
  {
    "id": "Warn about redundant calls to std::move.",
    "pattern": "Warn about redundant calls to std::move\\.",
    "replacement": ""
  },
  {
    "id": "Warn about uses of register storage specifier.",
    "pattern": "Warn about uses of register storage specifier\\.",
    "replacement": "对错误使用的 pragma 加以警告"
  },
  {
    "id": "Warn when the compiler reorders code.",
    "pattern": "Warn when the compiler reorders code\\.",
    "replacement": "编译器将代码重新排序时给出警告"
  },
  {
    "id": "Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++).",
    "pattern": "Warn whenever a function's return type defaults to \"int\" \\(C\\), or about inconsistent return types \\(C\\+\\+\\)\\.",
    "replacement": "当 C 函数的返回值默认为“int”，或者 C++ 函数的返回类型不一致时给出警告"
  },
  {
    "id": "Warn on suspicious constructs involving reverse scalar storage order.",
    "pattern": "Warn on suspicious constructs involving reverse scalar storage order\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a selector has multiple methods.",
    "pattern": "Warn if a selector has multiple methods\\.",
    "replacement": "当选择子有多个方法时给出警告"
  },
  {
    "id": "Warn about possible violations of sequence point rules.",
    "pattern": "Warn about possible violations of sequence point rules\\.",
    "replacement": "当可能违反定序点规则时给出警告"
  },
  {
    "id": "Warn if a local declaration hides an instance variable.",
    "pattern": "Warn if a local declaration hides an instance variable\\.",
    "replacement": "%qE的局部声明隐藏了实例变量"
  },
  {
    "id": "Warn if left shift of a signed value overflows.",
    "pattern": "Warn if left shift of a signed value overflows\\.",
    "replacement": ""
  },
  {
    "id": "Warn if shift count is negative.",
    "pattern": "Warn if shift count is negative\\.",
    "replacement": "右移次数为负"
  },
  {
    "id": "Warn if shift count >= width of type.",
    "pattern": "Warn if shift count >= width of type\\.",
    "replacement": "右移次数大于或等于类型宽度"
  },
  {
    "id": "Warn if left shifting a negative value.",
    "pattern": "Warn if left shifting a negative value\\.",
    "replacement": "右移次数为负"
  },
  {
    "id": "Warn if conversion of the result of arithmetic might change the value even though converting the operands cannot.",
    "pattern": "Warn if conversion of the result of arithmetic might change the value even though converting the operands cannot\\.",
    "replacement": ""
  },
  {
    "id": "Warn about signed-unsigned comparisons.",
    "pattern": "Warn about signed-unsigned comparisons\\.",
    "replacement": "在有符号和无符号数间进行比较时给出警告"
  },
  {
    "id": "Warn for implicit type conversions between signed and unsigned integers.",
    "pattern": "Warn for implicit type conversions between signed and unsigned integers\\.",
    "replacement": "为有符号和无符号整数间的隐式类型转换给出警告"
  },
  {
    "id": "Warn when overload promotes from unsigned to signed.",
    "pattern": "Warn when overload promotes from unsigned to signed\\.",
    "replacement": "当重载将无符号数提升为有符号数时给出警告"
  },
  {
    "id": "Warn about uncasted NULL used as sentinel.",
    "pattern": "Warn about uncasted NULL used as sentinel\\.",
    "replacement": "将未作转换的 NULL 用作哨兵时给出警告"
  },
  {
    "id": "Warn about unprototyped function declarations.",
    "pattern": "Warn about unprototyped function declarations\\.",
    "replacement": "使用了非原型的函数声明时给出警告"
  },
  {
    "id": "Warn if type signatures of candidate methods do not match exactly.",
    "pattern": "Warn if type signatures of candidate methods do not match exactly\\.",
    "replacement": "当备选方法的类型签字不完全匹配时给出警告"
  },
  {
    "id": "Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used.",
    "pattern": "Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used\\.",
    "replacement": "当 __sync_fetch_and_nand 和 __sync_nand_and_fetch 内建函数被使用时给出警告"
  },
  {
    "id": "Deprecated.  This switch has no effect.",
    "pattern": "Deprecated\\.  This switch has no effect\\.",
    "replacement": "已弃用。此开关不起作用。"
  },
  {
    "id": "Warn if a comparison always evaluates to true or false.",
    "pattern": "Warn if a comparison always evaluates to true or false\\.",
    "replacement": "当逻辑操作结果似乎总为真或假时给出警告"
  },
  {
    "id": "Warn if a throw expression will always result in a call to terminate().",
    "pattern": "Warn if a throw expression will always result in a call to terminate\\(\\)\\.",
    "replacement": ""
  },
  {
    "id": "Warn about features not present in traditional C.",
    "pattern": "Warn about features not present in traditional C\\.",
    "replacement": "使用了传统 C 不支持的特性时给出警告"
  },
  {
    "id": "Warn of prototypes causing type conversions different from what would happen in the absence of prototype.",
    "pattern": "Warn of prototypes causing type conversions different from what would happen in the absence of prototype\\.",
    "replacement": "原型导致的类型转换与无原型时的类型转换不同时给出警告"
  },
  {
    "id": "Warn if trigraphs are encountered that might affect the meaning of the program.",
    "pattern": "Warn if trigraphs are encountered that might affect the meaning of the program\\.",
    "replacement": "当三字母序列可能影响程序意义时给出警告"
  },
  {
    "id": "Warn about @selector()s without previously declared methods.",
    "pattern": "Warn about @selector\\(\\)s without previously declared methods\\.",
    "replacement": "当使用 @selector() 却不作事先声明时给出警告"
  },
  {
    "id": "Warn if an undefined macro is used in an #if directive.",
    "pattern": "Warn if an undefined macro is used in an #if directive\\.",
    "replacement": "当 #if 指令中用到未定义的宏时给出警告"
  },
  {
    "id": "Warn about unrecognized pragmas.",
    "pattern": "Warn about unrecognized pragmas\\.",
    "replacement": "对无法识别的 pragma 加以警告"
  },
  {
    "id": "Warn about unsuffixed float constants.",
    "pattern": "Warn about unsuffixed float constants\\.",
    "replacement": "对不带后缀的浮点常量给出警告"
  },
  {
    "id": "Warn when typedefs locally defined in a function are not used.",
    "pattern": "Warn when typedefs locally defined in a function are not used\\.",
    "replacement": "当定义在主文件中的宏未被使用时给出警告"
  },
  {
    "id": "Warn about macros defined in the main file that are not used.",
    "pattern": "Warn about macros defined in the main file that are not used\\.",
    "replacement": "当定义在主文件中的宏未被使用时给出警告"
  },
  {
    "id": "Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.",
    "pattern": "Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value\\.",
    "replacement": "当一个带有 warn_unused_result 属性的函数的调用者未使用前者的返回值时给出警告"
  },
  {
    "id": "Warn when a const variable is unused.",
    "pattern": "Warn when a const variable is unused\\.",
    "replacement": "有未使用的变量时警告"
  },
  {
    "id": "Warn about using variadic macros.",
    "pattern": "Warn about using variadic macros\\.",
    "replacement": "当定义在主文件中的宏未被使用时给出警告"
  },
  {
    "id": "Warn about questionable usage of the macros used to retrieve variable arguments.",
    "pattern": "Warn about questionable usage of the macros used to retrieve variable arguments\\.",
    "replacement": ""
  },
  {
    "id": "Warn about the most vexing parse syntactic ambiguity.",
    "pattern": "Warn about the most vexing parse syntactic ambiguity\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a variable length array is used.",
    "pattern": "Warn if a variable length array is used\\.",
    "replacement": "使用变长数组时警告"
  },
  {
    "id": "-Wvla-larger-than=<number>\\tWarn on unbounded uses of variable-length arrays, and on bounded uses of variable-length arrays whose bound can be larger than <number> bytes.",
    "pattern": "-Wvla-larger-than=<number>\\tWarn on unbounded uses of variable-length arrays, and on bounded uses of variable-length arrays whose bound can be larger than <number> bytes\\.",
    "replacement": "-Wlarger-than=<N>\\t当目标文件大于 N 字节时给出警告"
  },
  {
    "id": "Disable Wvla-larger-than= warning.  Equivalent to Wvla-larger-than=<SIZE_MAX> or larger.",
    "pattern": "Disable Wvla-larger-than= warning\\.  Equivalent to Wvla-larger-than=<SIZE_MAX> or larger\\.",
    "replacement": ""
  },
  {
    "id": "Warn about mismatched declarations of VLA parameters.",
    "pattern": "Warn about mismatched declarations of VLA parameters\\.",
    "replacement": "对同一个对象多次声明时给出警告"
  },
  {
    "id": "Warn about deprecated uses of volatile qualifier.",
    "pattern": "Warn about deprecated uses of volatile qualifier\\.",
    "replacement": "遇到已弃用的‘vector long ...’AltiVec 类型时给出警告"
  },
  {
    "id": "Warn when a register variable is declared volatile.",
    "pattern": "Warn when a register variable is declared volatile\\.",
    "replacement": "当一个寄存器变量被声明为 volatile 时给出警告"
  },
  {
    "id": "Warn on direct virtual inheritance.",
    "pattern": "Warn on direct virtual inheritance\\.",
    "replacement": ""
  },
  {
    "id": "Warn if a virtual base has a non-trivial move assignment operator.",
    "pattern": "Warn if a virtual base has a non-trivial move assignment operator\\.",
    "replacement": "%qT 有虚拟基底，缺省移动指派运算符无法产生"
  },
  {
    "id": "In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.",
    "pattern": "In C\\+\\+, nonzero means warn about deprecated conversion from string literals to 'char \\*'\\.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard\\.",
    "replacement": "在 C++ 中，非零值表示将字面字符串转换为‘char *’时给出警告。在 C 中，给出相似的警告，但这种类型转换是符合 ISO C 标准的。"
  },
  {
    "id": "Warn when a literal '0' is used as null pointer.",
    "pattern": "Warn when a literal '0' is used as null pointer\\.",
    "replacement": "有未使用的标号时警告"
  },
  {
    "id": "Warn about useless casts.",
    "pattern": "Warn about useless casts\\.",
    "replacement": "当类型转换丢失限定信息时给出警告"
  },
  {
    "id": "Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.",
    "pattern": "Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage\\.",
    "replacement": ""
  },
  {
    "id": "Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.",
    "pattern": "Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier\\.",
    "replacement": "当声明未指定类型时给出警告"
  },
  {
    "id": "Warn when an argument passed to a restrict-qualified parameter aliases with another argument.",
    "pattern": "Warn when an argument passed to a restrict-qualified parameter aliases with another argument\\.",
    "replacement": ""
  },
  {
    "id": "A synonym for -std=c89 (for C) or -std=c++98 (for C++).",
    "pattern": "A synonym for -std=c89 \\(for C\\) or -std=c\\+\\+98 \\(for C\\+\\+\\)\\.",
    "replacement": "-std=c89 (对 C 来说) 或 -std=c++98 (对 C++ 来说)的同义词"
  },
  {
    "id": "The version of the C++ ABI used for -Wabi warnings and link compatibility aliases.",
    "pattern": "The version of the C\\+\\+ ABI used for -Wabi warnings and link compatibility aliases\\.",
    "replacement": "用于 -Wabi 警告和链接兼容性别名的 C++ ABI 版本。"
  },
  {
    "id": "Enforce class member access control semantics.",
    "pattern": "Enforce class member access control semantics\\.",
    "replacement": "执行类成员访问控制语义"
  },
  {
    "id": "-fada-spec-parent=unit\\tDump Ada specs as child units of given parent.",
    "pattern": "-fada-spec-parent=unit\\tDump Ada specs as child units of given parent\\.",
    "replacement": ""
  },
  {
    "id": "Support C++17 allocation of over-aligned types.",
    "pattern": "Support C\\+\\+17 allocation of over-aligned types\\.",
    "replacement": ""
  },
  {
    "id": "-faligned-new=<N>\\tUse C++17 over-aligned type allocation for alignments greater than N.",
    "pattern": "-faligned-new=<N>\\tUse C\\+\\+17 over-aligned type allocation for alignments greater than N\\.",
    "replacement": ""
  },
  {
    "id": "Allow variadic functions without named parameter.",
    "pattern": "Allow variadic functions without named parameter\\.",
    "replacement": "可变参数函数必须使用基础的 AAPCS 变种"
  },
  {
    "id": "No longer supported.",
    "pattern": "No longer supported\\.",
    "replacement": "不再支持。"
  },
  {
    "id": "Recognize the \\\"asm\\\" keyword.",
    "pattern": "Recognize the \"asm\" keyword\\.",
    "replacement": "识别“asm”关键字。"
  },
  {
    "id": "Recognize built-in functions.",
    "pattern": "Recognize built-in functions\\.",
    "replacement": "识别内建函数"
  },
  {
    "id": "Where shorter, use canonicalized paths to systems headers.",
    "pattern": "Where shorter, use canonicalized paths to systems headers\\.",
    "replacement": ""
  },
  {
    "id": "Enable the char8_t fundamental type and use it as the type for UTF-8 string and character literals.",
    "pattern": "Enable the char8_t fundamental type and use it as the type for UTF-8 string and character literals\\.",
    "replacement": ""
  },
  {
    "id": "Removed in GCC 8.  This switch has no effect.",
    "pattern": "Removed in GCC 8\\.  This switch has no effect\\.",
    "replacement": "已弃用。此开关不起作用。"
  },
  {
    "id": "Enable support for C++ concepts.",
    "pattern": "Enable support for C\\+\\+ concepts\\.",
    "replacement": "启用支持用于 GNU transactional 内存"
  },
  {
    "id": "Enable certain features present in the Concepts TS.",
    "pattern": "Enable certain features present in the Concepts TS\\.",
    "replacement": "使用了传统 C 不支持的特性时给出警告"
  },
  {
    "id": "Specify maximum error replay depth during recursive diagnosis of a constraint satisfaction failure.",
    "pattern": "Specify maximum error replay depth during recursive diagnosis of a constraint satisfaction failure\\.",
    "replacement": ""
  },
  {
    "id": "Allow the arguments of the '?' operator to have different types.",
    "pattern": "Allow the arguments of the '\\?' operator to have different types\\.",
    "replacement": "允许‘?’运算符的参数有不同的类型"
  },
  {
    "id": "-fconst-string-class=<name>\\tUse class <name> for constant strings.",
    "pattern": "-fconst-string-class=<name>\\tUse class <name> for constant strings\\.",
    "replacement": "-fconst-string-class=<名字>\\t使用名字作为常量字符串类的名称"
  },
  {
    "id": "-fconstexpr-depth=<number>\\tSpecify maximum constexpr recursion depth.",
    "pattern": "-fconstexpr-depth=<number>\\tSpecify maximum constexpr recursion depth\\.",
    "replacement": "-ftemplate-depth=<N>\\t指定模板实例化的最大深度"
  },
  {
    "id": "-fconstexpr-cache-depth=<number>\\tSpecify maximum constexpr recursion cache depth.",
    "pattern": "-fconstexpr-cache-depth=<number>\\tSpecify maximum constexpr recursion cache depth\\.",
    "replacement": "-ftemplate-depth=<N>\\t指定模板实例化的最大深度"
  },
  {
    "id": "Allow IEC559 floating point exceptions in constant expressions.",
    "pattern": "Allow IEC559 floating point exceptions in constant expressions\\.",
    "replacement": "常量表达式中的 Lambda 表达式"
  },
  {
    "id": "-fconstexpr-loop-limit=<number>\\tSpecify maximum constexpr loop iteration count.",
    "pattern": "-fconstexpr-loop-limit=<number>\\tSpecify maximum constexpr loop iteration count\\.",
    "replacement": "-ftemplate-depth=<N>\\t指定模板实例化的最大深度"
  },
  {
    "id": "-fconstexpr-ops-limit=<number>\\tSpecify maximum number of constexpr operations during a single constexpr evaluation.",
    "pattern": "-fconstexpr-ops-limit=<number>\\tSpecify maximum number of constexpr operations during a single constexpr evaluation\\.",
    "replacement": "-ftemplate-depth=<N>\\t指定模板实例化的最大深度"
  },
  {
    "id": "Enable C++ coroutines (experimental).",
    "pattern": "Enable C\\+\\+ coroutines \\(experimental\\)\\.",
    "replacement": ""
  },
  {
    "id": "Emit debug annotations during preprocessing.",
    "pattern": "Emit debug annotations during preprocessing\\.",
    "replacement": "启用传统预处理"
  },
  {
    "id": "Factor complex constructors and destructors to favor space over speed.",
    "pattern": "Factor complex constructors and destructors to favor space over speed\\.",
    "replacement": "当所有构造函数和析构函数都是私有时给出警告"
  },
  {
    "id": "Print hierarchical comparisons when template types are mismatched.",
    "pattern": "Print hierarchical comparisons when template types are mismatched\\.",
    "replacement": ""
  },
  {
    "id": "Preprocess directives only.",
    "pattern": "Preprocess directives only\\.",
    "replacement": "仅预处理指示。"
  },
  {
    "id": "Permit '$' as an identifier character.",
    "pattern": "Permit '\\$' as an identifier character\\.",
    "replacement": "允许‘$’作为标识符的一部分"
  },
  {
    "id": "-fmacro-prefix-map=<old>=<new>\\tMap one directory name to another in __FILE__, __BASE_FILE__, and __builtin_FILE().",
    "pattern": "-fmacro-prefix-map=<old>=<new>\\tMap one directory name to another in __FILE__, __BASE_FILE__, and __builtin_FILE\\(\\)\\.",
    "replacement": "在调试信息中将一个目录名映射到另一个"
  },
  {
    "id": "Write all declarations as Ada code transitively.",
    "pattern": "Write all declarations as Ada code transitively\\.",
    "replacement": ""
  },
  {
    "id": "Write all declarations as Ada code for the given file only.",
    "pattern": "Write all declarations as Ada code for the given file only\\.",
    "replacement": ""
  },
  {
    "id": "Do not elide common elements in template comparisons.",
    "pattern": "Do not elide common elements in template comparisons\\.",
    "replacement": "展开宏时不丢弃注释"
  },
  {
    "id": "Generate code to check exception specifications.",
    "pattern": "Generate code to check exception specifications\\.",
    "replacement": "生成检查异常规范的代码"
  },
  {
    "id": "-fexec-charset=<cset>\\tConvert all strings and character constants to character set <cset>.",
    "pattern": "-fexec-charset=<cset>\\tConvert all strings and character constants to character set <cset>\\.",
    "replacement": "-fexec-charset=<字符集>\\t将所有字符串和字符常量转换到字符集"
  },
  {
    "id": "Permit universal character names (\\\\u and \\\\U) in identifiers.",
    "pattern": "Permit universal character names \\(\\\\u and \\\\U\\) in identifiers\\.",
    "replacement": "允许标识符中出现 Unicode 字符名(\\\\u 和 \\\\U)"
  },
  {
    "id": "-finput-charset=<cset>\\tSpecify the default character set for source files.",
    "pattern": "-finput-charset=<cset>\\tSpecify the default character set for source files\\.",
    "replacement": "-finput-charset=<字符集>\\t指定源代码的默认字符集"
  },
  {
    "id": "Support dynamic initialization of thread-local variables in a different translation unit.",
    "pattern": "Support dynamic initialization of thread-local variables in a different translation unit\\.",
    "replacement": ""
  },
  {
    "id": "Fold calls to simple inline functions.",
    "pattern": "Fold calls to simple inline functions\\.",
    "replacement": "内部函数"
  },
  {
    "id": "Do not assume that standard C libraries and \\\"main\\\" exist.",
    "pattern": "Do not assume that standard C libraries and \"main\" exist\\.",
    "replacement": "不假定标准 C 库和“main”存在"
  },
  {
    "id": "Recognize GNU-defined keywords.",
    "pattern": "Recognize GNU-defined keywords\\.",
    "replacement": "识别 GNU 定义的关键字。"
  },
  {
    "id": "Generate code for GNU runtime environment.",
    "pattern": "Generate code for GNU runtime environment\\.",
    "replacement": "为 GNU 运行时环境生成代码"
  },
  {
    "id": "Use traditional GNU semantics for inline functions.",
    "pattern": "Use traditional GNU semantics for inline functions\\.",
    "replacement": "为内联函数使用传统的 GNU 语义"
  },
  {
    "id": "Assume normal C execution environment.",
    "pattern": "Assume normal C execution environment\\.",
    "replacement": "假定一般的 C 执行环境"
  },
  {
    "id": "Export functions even if they can be inlined.",
    "pattern": "Export functions even if they can be inlined\\.",
    "replacement": "导出被内联的函数"
  },
  {
    "id": "Make inline functions constexpr by default.",
    "pattern": "Make inline functions constexpr by default\\.",
    "replacement": "使“char”类型默认为无符号。"
  },
  {
    "id": "Emit implicit instantiations of inline templates.",
    "pattern": "Emit implicit instantiations of inline templates\\.",
    "replacement": "允许内联模板隐式实例化"
  },
  {
    "id": "Emit implicit instantiations of templates.",
    "pattern": "Emit implicit instantiations of templates\\.",
    "replacement": "允许模板隐式实例化"
  },
  {
    "id": "Implement C++17 inheriting constructor semantics.",
    "pattern": "Implement C\\+\\+17 inheriting constructor semantics\\.",
    "replacement": ""
  },
  {
    "id": "Don't emit dllexported inline functions unless needed.",
    "pattern": "Don't emit dllexported inline functions unless needed\\.",
    "replacement": "除非必需，不生成 DLL 导出的内联函数"
  },
  {
    "id": "Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.",
    "pattern": "Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types\\.",
    "replacement": "允许具有不同元素数量和/或元素类型的向量间的转换"
  },
  {
    "id": "Enable C++ modules-ts (experimental).",
    "pattern": "Enable C\\+\\+ modules-ts \\(experimental\\)\\.",
    "replacement": ""
  },
  {
    "id": "Enable C++ header module (experimental).",
    "pattern": "Enable C\\+\\+ header module \\(experimental\\)\\.",
    "replacement": ""
  },
  {
    "id": "Member functions defined within their class are inline in module purview.",
    "pattern": "Member functions defined within their class are inline in module purview\\.",
    "replacement": ""
  },
  {
    "id": "Only emit Compiled Module Interface.",
    "pattern": "Only emit Compiled Module Interface\\.",
    "replacement": ""
  },
  {
    "id": "Mapper for module to CMI files.",
    "pattern": "Mapper for module to CMI files\\.",
    "replacement": ""
  },
  {
    "id": "Enable lazy module importing.",
    "pattern": "Enable lazy module importing\\.",
    "replacement": "删除死存储"
  },
  {
    "id": "Warn about macros that have conflicting header units definitions.",
    "pattern": "Warn about macros that have conflicting header units definitions\\.",
    "replacement": "对隐式函数声明给出警告"
  },
  {
    "id": "Note #include directives translated to import declarations.",
    "pattern": "Note #include directives translated to import declarations\\.",
    "replacement": ""
  },
  {
    "id": "Note #include directives not translated to import declarations, and not known to be textual.",
    "pattern": "Note #include directives not translated to import declarations, and not known to be textual\\.",
    "replacement": ""
  },
  {
    "id": "Note a #include translation of a specific header.",
    "pattern": "Note a #include translation of a specific header\\.",
    "replacement": ""
  },
  {
    "id": "Note Compiled Module Interface pathnames.",
    "pattern": "Note Compiled Module Interface pathnames\\.",
    "replacement": ""
  },
  {
    "id": "Note Compiled Module Interface pathname of a specific module or header-unit.",
    "pattern": "Note Compiled Module Interface pathname of a specific module or header-unit\\.",
    "replacement": ""
  },
  {
    "id": "fmax-include-depth=<number> Set the maximum depth of the nested #include.",
    "pattern": "fmax-include-depth=<number> Set the maximum depth of the nested #include\\.",
    "replacement": ""
  },
  {
    "id": "Don't warn about uses of Microsoft extensions.",
    "pattern": "Don't warn about uses of Microsoft extensions\\.",
    "replacement": "使用微软扩展时不给出警告"
  },
  {
    "id": "Implement resolution of DR 150 for matching of template template arguments.",
    "pattern": "Implement resolution of DR 150 for matching of template template arguments\\.",
    "replacement": ""
  },
  {
    "id": "Generate code for NeXT (Apple Mac OS X) runtime environment.",
    "pattern": "Generate code for NeXT \\(Apple Mac OS X\\) runtime environment\\.",
    "replacement": "为 NeXT (苹果 Mac OS X) 运行时环境生成代码"
  },
  {
    "id": "Assume that receivers of Objective-C messages may be nil.",
    "pattern": "Assume that receivers of Objective-C messages may be nil\\.",
    "replacement": "假定 Objective-C 消息的接受者可能是 nil"
  },
  {
    "id": "Allow access to instance variables as if they were local declarations within instance method implementations.",
    "pattern": "Allow access to instance variables as if they were local declarations within instance method implementations\\.",
    "replacement": ""
  },
  {
    "id": "-fvisibility=[private|protected|public|package]\\tSet the default symbol visibility.",
    "pattern": "-fvisibility=\\[private\\|protected\\|public\\|package\\]\\tSet the default symbol visibility\\.",
    "replacement": "-fvisibility=[default|internal|hidden|protected]\\t设置符号的默认可见性"
  },
  {
    "id": "Treat a throw() exception specification as noexcept to improve code size.",
    "pattern": "Treat a throw\\(\\) exception specification as noexcept to improve code size\\.",
    "replacement": "对待丢掷() 异常规格作为 noexcept 到改善编码大小"
  },
  {
    "id": "Specify which ABI to use for Objective-C family code and meta-data generation.",
    "pattern": "Specify which ABI to use for Objective-C family code and meta-data generation\\.",
    "replacement": "指定该项 ABI 以使用用于 Objective-C 家族编码和元数据产生。"
  },
  {
    "id": "Generate special Objective-C methods to initialize/destroy non-POD C++ ivars, if needed.",
    "pattern": "Generate special Objective-C methods to initialize/destroy non-POD C\\+\\+ ivars, if needed\\.",
    "replacement": "如果需要，生成特殊的 Objective-C 方法来初始化/析构非简单旧数据 C++ 变量"
  },
  {
    "id": "Allow fast jumps to the message dispatcher.",
    "pattern": "Allow fast jumps to the message dispatcher\\.",
    "replacement": "允许快速跳转至消息分发者。"
  },
  {
    "id": "Enable Objective-C exception and synchronization syntax.",
    "pattern": "Enable Objective-C exception and synchronization syntax\\.",
    "replacement": "启用 Objective-C 异常和同步语法"
  },
  {
    "id": "Enable garbage collection (GC) in Objective-C/Objective-C++ programs.",
    "pattern": "Enable garbage collection \\(GC\\) in Objective-C/Objective-C\\+\\+ programs\\.",
    "replacement": "在 Objective-C/Objective-C++ 程序中启用垃圾收集"
  },
  {
    "id": "Enable inline checks for nil receivers with the NeXT runtime and ABI version 2.",
    "pattern": "Enable inline checks for nil receivers with the NeXT runtime and ABI version 2\\.",
    "replacement": "启用内联检查看看零收件者与下一个运行阶段和 ABI 版本 2。"
  },
  {
    "id": "Enable Objective-C setjmp exception handling runtime.",
    "pattern": "Enable Objective-C setjmp exception handling runtime\\.",
    "replacement": "启用 Objective-C setjmp 异常处理运行时"
  },
  {
    "id": "Conform to the Objective-C 1.0 language as implemented in GCC 4.0.",
    "pattern": "Conform to the Objective-C 1\\.0 language as implemented in GCC 4\\.0\\.",
    "replacement": "遵循于 GCC 4.0 实现的 Ojbective-C 1.0 语言"
  },
  {
    "id": "Enable OpenACC.",
    "pattern": "Enable OpenACC\\.",
    "replacement": "对齐 COMMON 块"
  },
  {
    "id": "Specify default OpenACC compute dimensions.",
    "pattern": "Specify default OpenACC compute dimensions\\.",
    "replacement": ""
  },
  {
    "id": "Enable OpenMP (implies -frecursive in Fortran).",
    "pattern": "Enable OpenMP \\(implies -frecursive in Fortran\\)\\.",
    "replacement": "启用 OpenMP(对 Fortran 而言也同时设定 -frecursive)"
  },
  {
    "id": "Enable OpenMP's SIMD directives.",
    "pattern": "Enable OpenMP's SIMD directives\\.",
    "replacement": "启用 OpenMP(对 Fortran 而言也同时设定 -frecursive)"
  },
  {
    "id": "Recognize C++ keywords like \\\"compl\\\" and \\\"xor\\\".",
    "pattern": "Recognize C\\+\\+ keywords like \"compl\" and \"xor\"\\.",
    "replacement": "识别“compl”、“xor”等 C++ 关键词"
  },
  {
    "id": "Look for and use PCH files even when preprocessing.",
    "pattern": "Look for and use PCH files even when preprocessing\\.",
    "replacement": "即使在预处理时也搜索并使用 PCH 文件"
  },
  {
    "id": "Downgrade conformance errors to warnings.",
    "pattern": "Downgrade conformance errors to warnings\\.",
    "replacement": "将兼容性错误降格为警告"
  },
  {
    "id": "Enable Plan 9 language extensions.",
    "pattern": "Enable Plan 9 language extensions\\.",
    "replacement": "启用九号计划语言扩展"
  },
  {
    "id": "Treat the input file as already preprocessed.",
    "pattern": "Treat the input file as already preprocessed\\.",
    "replacement": "将输入文件当作已经预处理过的"
  },
  {
    "id": "-ftrack-macro-expansion=<0|1|2>\\tTrack locations of tokens coming from macro expansion and display them in error messages.",
    "pattern": "-ftrack-macro-expansion=<0\\|1\\|2>\\tTrack locations of tokens coming from macro expansion and display them in error messages\\.",
    "replacement": "-ftrack-macro-expansion=<0|1|2> 轨段位置的字组来自宏展开和显示它们在中错误消息"
  },
  {
    "id": "Do not pretty-print template specializations as the template signature followed by the arguments.",
    "pattern": "Do not pretty-print template specializations as the template signature followed by the arguments\\.",
    "replacement": "-fno-pretty-templates 不使用模板签名加实参的方式美化模板特例化的打印"
  },
  {
    "id": "Treat known sprintf return values as constants.",
    "pattern": "Treat known sprintf return values as constants\\.",
    "replacement": ""
  },
  {
    "id": "Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime.",
    "pattern": "Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime\\.",
    "replacement": "指定对象文件可能在运行时被换入以允许“修复并继续”调试模式"
  },
  {
    "id": "Removed in GCC 10.  This switch has no effect.",
    "pattern": "Removed in GCC 10\\.  This switch has no effect\\.",
    "replacement": "已弃用。此开关不起作用。"
  },
  {
    "id": "Generate run time type descriptor information.",
    "pattern": "Generate run time type descriptor information\\.",
    "replacement": "生成运行时类型描述信息"
  },
  {
    "id": "Use the narrowest integer type possible for enumeration types.",
    "pattern": "Use the narrowest integer type possible for enumeration types\\.",
    "replacement": "为枚举类型使用尽可能窄的整数类型"
  },
  {
    "id": "Force the underlying type for \\\"wchar_t\\\" to be \\\"unsigned short\\\".",
    "pattern": "Force the underlying type for \"wchar_t\" to be \"unsigned short\"\\.",
    "replacement": "强制指定“wchar_t”的内在类型为“unsigned short”"
  },
  {
    "id": "When \\\"signed\\\" or \\\"unsigned\\\" is not given make the bitfield signed.",
    "pattern": "When \"signed\" or \"unsigned\" is not given make the bitfield signed\\.",
    "replacement": "没有给定“signed”或“unsigned”时将位段视作有符号的"
  },
  {
    "id": "Make \\\"char\\\" signed by default.",
    "pattern": "Make \"char\" signed by default\\.",
    "replacement": "使“char”类型默认为有符号"
  },
  {
    "id": "Enable C++14 sized deallocation support.",
    "pattern": "Enable C\\+\\+14 sized deallocation support\\.",
    "replacement": "启用硬件十进制浮点支持"
  },
  {
    "id": "-fsso-struct=[big-endian|little-endian|native]\\tSet the default scalar storage order.",
    "pattern": "-fsso-struct=\\[big-endian\\|little-endian\\|native\\]\\tSet the default scalar storage order\\.",
    "replacement": ""
  },
  {
    "id": "Display statistics accumulated during compilation.",
    "pattern": "Display statistics accumulated during compilation\\.",
    "replacement": "显示编译过程中累计的统计数字"
  },
  {
    "id": "Assume that values of enumeration type are always within the minimum range of that type.",
    "pattern": "Assume that values of enumeration type are always within the minimum range of that type\\.",
    "replacement": "假设该值的枚举类型类型是一律在之内最小范围的该类型"
  },
  {
    "id": "Follow the C++17 evaluation order requirements for assignment expressions, shift, member function calls, etc.",
    "pattern": "Follow the C\\+\\+17 evaluation order requirements for assignment expressions, shift, member function calls, etc\\.",
    "replacement": ""
  },
  {
    "id": "Set the maximum number of template instantiation notes for a single warning or error.",
    "pattern": "Set the maximum number of template instantiation notes for a single warning or error\\.",
    "replacement": "单个循环最大的剥离数"
  },
  {
    "id": "-ftemplate-depth=<number>\\tSpecify maximum template instantiation depth.",
    "pattern": "-ftemplate-depth=<number>\\tSpecify maximum template instantiation depth\\.",
    "replacement": "-ftemplate-depth=<N>\\t指定模板实例化的最大深度"
  },
  {
    "id": "-fno-threadsafe-statics\\tDo not generate thread-safe code for initializing local statics.",
    "pattern": "-fno-threadsafe-statics\\tDo not generate thread-safe code for initializing local statics\\.",
    "replacement": "-fno-threadsafe-statics\\t不为局部静态变量生成线程安全的初始化代码"
  },
  {
    "id": "When \\\"signed\\\" or \\\"unsigned\\\" is not given make the bitfield unsigned.",
    "pattern": "When \"signed\" or \"unsigned\" is not given make the bitfield unsigned\\.",
    "replacement": "未指定“signed”或“unsigned”时默认位段为无符号的"
  },
  {
    "id": "Make \\\"char\\\" unsigned by default.",
    "pattern": "Make \"char\" unsigned by default\\.",
    "replacement": "使“char”类型默认为无符号。"
  },
  {
    "id": "Use __cxa_atexit to register destructors.",
    "pattern": "Use __cxa_atexit to register destructors\\.",
    "replacement": "将 __cxa_atexit 而非 atexit 登记为析构函数"
  },
  {
    "id": "Use __cxa_get_exception_ptr in exception handling.",
    "pattern": "Use __cxa_get_exception_ptr in exception handling\\.",
    "replacement": "在异常处理中使用 __cxa_get_exception_ptr"
  },
  {
    "id": "Marks all inlined functions and methods as having hidden visibility.",
    "pattern": "Marks all inlined functions and methods as having hidden visibility\\.",
    "replacement": "将所有内联函数标记为具有隐藏的可见性"
  },
  {
    "id": "Changes visibility to match Microsoft Visual Studio by default.",
    "pattern": "Changes visibility to match Microsoft Visual Studio by default\\.",
    "replacement": "默认使用与 Microsoft Visual Studio 匹配的可见性"
  },
  {
    "id": "Emit common-like symbols as weak symbols.",
    "pattern": "Emit common-like symbols as weak symbols\\.",
    "replacement": "将公共符号视作弱符号"
  },
  {
    "id": "-fwide-exec-charset=<cset>\\tConvert all wide strings and character constants to character set <cset>.",
    "pattern": "-fwide-exec-charset=<cset>\\tConvert all wide strings and character constants to character set <cset>\\.",
    "replacement": "-finput-charset=<字符集>\\t将所有宽字符串和字符常量都转换为字符集"
  },
  {
    "id": "Generate a #line directive pointing at the current working directory.",
    "pattern": "Generate a #line directive pointing at the current working directory\\.",
    "replacement": "生成一个指向当前工作目录的 #line 预处理指令"
  },
  {
    "id": "Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode.",
    "pattern": "Generate lazy class lookup \\(via objc_getClass\\(\\)\\) for use in Zero-Link mode\\.",
    "replacement": "为 Zero-Link 模式生成后期类查找(通过 objc_getClass())"
  },
  {
    "id": "Dump declarations to a .decl file.",
    "pattern": "Dump declarations to a \\.decl file\\.",
    "replacement": "将声明转储到一个 .decl 文件中"
  },
  {
    "id": "-femit-struct-debug-baseonly\\tAggressive reduced debug info for structs.",
    "pattern": "-femit-struct-debug-baseonly\\tAggressive reduced debug info for structs\\.",
    "replacement": "-femit-struct-debug-baseonly\\t积极地缩减结构体的调试信息"
  },
  {
    "id": "-femit-struct-debug-reduced\\tConservative reduced debug info for structs.",
    "pattern": "-femit-struct-debug-reduced\\tConservative reduced debug info for structs\\.",
    "replacement": "-femit-struct-debug-reduced\\t保守地缩减结构体的调试信息"
  },
  {
    "id": "-femit-struct-debug-detailed=<spec-list>\\tDetailed reduced debug info for structs.",
    "pattern": "-femit-struct-debug-detailed=<spec-list>\\tDetailed reduced debug info for structs\\.",
    "replacement": "-femit-struct-debug-detailed=<规格列表>\\t详细指定如何缩减结构体的调试信息"
  },
  {
    "id": "Interpret imaginary, fixed-point, or other gnu number suffix as the corresponding number literal rather than a user-defined number literal.",
    "pattern": "Interpret imaginary, fixed-point, or other gnu number suffix as the corresponding number literal rather than a user-defined number literal\\.",
    "replacement": ""
  },
  {
    "id": "-idirafter <dir>\\tAdd <dir> to the end of the system include path.",
    "pattern": "-idirafter <dir>\\tAdd <dir> to the end of the system include path\\.",
    "replacement": "-idirafter <目录>\\t将目录添加至系统包含路径末尾"
  },
  {
    "id": "-imacros <file>\\tAccept definition of macros in <file>.",
    "pattern": "-imacros <file>\\tAccept definition of macros in <file>\\.",
    "replacement": "-imacros <文件>\\t接受文件中定义的宏"
  },
  {
    "id": "-imultilib <dir>\\tSet <dir> to be the multilib include subdirectory.",
    "pattern": "-imultilib <dir>\\tSet <dir> to be the multilib include subdirectory\\.",
    "replacement": "-imultilib <目录>\\t将目录设定为 multilib 的包含子目录"
  },
  {
    "id": "-include <file>\\tInclude the contents of <file> before other files.",
    "pattern": "-include <file>\\tInclude the contents of <file> before other files\\.",
    "replacement": "-include <文件>\\t在包含其它文件之前先包含该文件的内容"
  },
  {
    "id": "-iprefix <path>\\tSpecify <path> as a prefix for next two options.",
    "pattern": "-iprefix <path>\\tSpecify <path> as a prefix for next two options\\.",
    "replacement": "-iprefix <路径>\\t将路径指定为下两个选项的前缀"
  },
  {
    "id": "-isysroot <dir>\\tSet <dir> to be the system root directory.",
    "pattern": "-isysroot <dir>\\tSet <dir> to be the system root directory\\.",
    "replacement": "-isysroot <目录>\\t将目录设为系统根目录"
  },
  {
    "id": "-isystem <dir>\\tAdd <dir> to the start of the system include path.",
    "pattern": "-isystem <dir>\\tAdd <dir> to the start of the system include path\\.",
    "replacement": "-isystem <目录>\\t将目录添加至系统包含路径开头"
  },
  {
    "id": "-iquote <dir>\\tAdd <dir> to the end of the quote include path.",
    "pattern": "-iquote <dir>\\tAdd <dir> to the end of the quote include path\\.",
    "replacement": "-iquote <目录>\\t将目录添加至括起的包含路径末尾"
  },
  {
    "id": "-iwithprefix <dir>\\tAdd <dir> to the end of the system include path.",
    "pattern": "-iwithprefix <dir>\\tAdd <dir> to the end of the system include path\\.",
    "replacement": "-iwithprefix <目录>\\t将目录添加至系统包含路径末尾"
  },
  {
    "id": "-iwithprefixbefore <dir>\\tAdd <dir> to the end of the main include path.",
    "pattern": "-iwithprefixbefore <dir>\\tAdd <dir> to the end of the main include path\\.",
    "replacement": "-iwithprefixbefore <目录>\\t将目录添加至主包含路径末尾"
  },
  {
    "id": "Do not search standard system include directories (those specified with -isystem will still be used).",
    "pattern": "Do not search standard system include directories \\(those specified with -isystem will still be used\\)\\.",
    "replacement": "不搜索标准系统头文件目录(但仍将使用由 -isystem 指定的目录)"
  },
  {
    "id": "Do not search standard system include directories for C++.",
    "pattern": "Do not search standard system include directories for C\\+\\+\\.",
    "replacement": "不搜索 C++ 标准系统头文件目录"
  },
  {
    "id": "Generate C header of platform-specific features.",
    "pattern": "Generate C header of platform-specific features\\.",
    "replacement": "生成有平台相关特性的 C 头文件"
  },
  {
    "id": "Remap file names when including files.",
    "pattern": "Remap file names when including files\\.",
    "replacement": "包含文件时映射短文件名"
  },
  {
    "id": "Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum.",
    "pattern": "Conform to the ISO 1998 C\\+\\+ standard revised by the 2003 technical corrigendum\\.",
    "replacement": "遵循 ISO 1998 C++ 标准于 2003 年的技术勘误版本"
  },
  {
    "id": "Conform to the ISO 2011 C++ standard.",
    "pattern": "Conform to the ISO 2011 C\\+\\+ standard\\.",
    "replacement": "遵循 ISO 2011 C++ 标准"
  },
  {
    "id": "Deprecated in favor of -std=c++11.",
    "pattern": "Deprecated in favor of -std=c\\+\\+11\\.",
    "replacement": "已弃用，请改用 -std=gnu99"
  },
  {
    "id": "Deprecated in favor of -std=c++14.",
    "pattern": "Deprecated in favor of -std=c\\+\\+14\\.",
    "replacement": "已弃用，请改用 -std=gnu99"
  },
  {
    "id": "Conform to the ISO 2014 C++ standard.",
    "pattern": "Conform to the ISO 2014 C\\+\\+ standard\\.",
    "replacement": "遵循 ISO 2011 C++ 标准"
  },
  {
    "id": "Deprecated in favor of -std=c++17.",
    "pattern": "Deprecated in favor of -std=c\\+\\+17\\.",
    "replacement": "已弃用，请改用 -std=gnu99"
  },
  {
    "id": "Conform to the ISO 2017 C++ standard.",
    "pattern": "Conform to the ISO 2017 C\\+\\+ standard\\.",
    "replacement": "遵循 ISO 2011 C++ 标准"
  },
  {
    "id": "Conform to the ISO 2020 C++ standard (experimental and incomplete support).",
    "pattern": "Conform to the ISO 2020 C\\+\\+ standard \\(experimental and incomplete support\\)\\.",
    "replacement": "遵循 ISO 2017(?) C++ 标准草案(试验性质的不完全支持)"
  },
  {
    "id": "Conform to the ISO 2023 C++ draft standard (experimental and incomplete support).",
    "pattern": "Conform to the ISO 2023 C\\+\\+ draft standard \\(experimental and incomplete support\\)\\.",
    "replacement": "遵循 ISO 2017(?) C++ 标准草案(试验性质的不完全支持)"
  },
  {
    "id": "Conform to the ISO 2011 C standard.",
    "pattern": "Conform to the ISO 2011 C standard\\.",
    "replacement": "遵循 ISO 2011 C++ 标准"
  },
  {
    "id": "Deprecated in favor of -std=c11.",
    "pattern": "Deprecated in favor of -std=c11\\.",
    "replacement": "已弃用，请改用 -std=c99"
  },
  {
    "id": "Conform to the ISO 2017 C standard (published in 2018).",
    "pattern": "Conform to the ISO 2017 C standard \\(published in 2018\\)\\.",
    "replacement": "遵循 ISO 2011 C++ 标准"
  },
  {
    "id": "Conform to the ISO 202X C standard draft (experimental and incomplete support).",
    "pattern": "Conform to the ISO 202X C standard draft \\(experimental and incomplete support\\)\\.",
    "replacement": "遵循 ISO 2017(?) C++ 标准草案(试验性质的不完全支持)"
  },
  {
    "id": "Conform to the ISO 1990 C standard.",
    "pattern": "Conform to the ISO 1990 C standard\\.",
    "replacement": "遵循 ISO 1990 C 标准"
  },
  {
    "id": "Conform to the ISO 1999 C standard.",
    "pattern": "Conform to the ISO 1999 C standard\\.",
    "replacement": "遵循 ISO 1999 C 标准"
  },
  {
    "id": "Deprecated in favor of -std=c99.",
    "pattern": "Deprecated in favor of -std=c99\\.",
    "replacement": "已弃用，请改用 -std=c99"
  },
  {
    "id": "Conform to the ISO 1998 C++ standard revised by the 2003 technical corrigendum with GNU extensions.",
    "pattern": "Conform to the ISO 1998 C\\+\\+ standard revised by the 2003 technical corrigendum with GNU extensions\\.",
    "replacement": "遵循 ISO 1998 C++ 标准于 2003 年的技术勘误版本"
  },
  {
    "id": "Conform to the ISO 2011 C++ standard with GNU extensions.",
    "pattern": "Conform to the ISO 2011 C\\+\\+ standard with GNU extensions\\.",
    "replacement": "遵循 ISO 1990 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Deprecated in favor of -std=gnu++11.",
    "pattern": "Deprecated in favor of -std=gnu\\+\\+11\\.",
    "replacement": "已弃用，请改用 -std=gnu++11。"
  },
  {
    "id": "Deprecated in favor of -std=gnu++14.",
    "pattern": "Deprecated in favor of -std=gnu\\+\\+14\\.",
    "replacement": "已弃用，请改用 -std=gnu++14。"
  },
  {
    "id": "Conform to the ISO 2014 C++ standard with GNU extensions.",
    "pattern": "Conform to the ISO 2014 C\\+\\+ standard with GNU extensions\\.",
    "replacement": "遵循 ISO 1990 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Deprecated in favor of -std=gnu++17.",
    "pattern": "Deprecated in favor of -std=gnu\\+\\+17\\.",
    "replacement": "已弃用，请改用 -std=gnu+17。"
  },
  {
    "id": "Conform to the ISO 2017 C++ standard with GNU extensions.",
    "pattern": "Conform to the ISO 2017 C\\+\\+ standard with GNU extensions\\.",
    "replacement": "遵循 ISO 1990 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Conform to the ISO 2020 C++ standard with GNU extensions (experimental and incomplete support).",
    "pattern": "Conform to the ISO 2020 C\\+\\+ standard with GNU extensions \\(experimental and incomplete support\\)\\.",
    "replacement": "遵循 ISO 201z(7?) C++ 标准草案和 GNU 扩展(试验性质的不完全支持)"
  },
  {
    "id": "Conform to the ISO 2023 C++ draft standard with GNU extensions (experimental and incomplete support).",
    "pattern": "Conform to the ISO 2023 C\\+\\+ draft standard with GNU extensions \\(experimental and incomplete support\\)\\.",
    "replacement": "遵循 ISO 201z(7?) C++ 标准草案和 GNU 扩展(试验性质的不完全支持)"
  },
  {
    "id": "Conform to the ISO 2011 C standard with GNU extensions.",
    "pattern": "Conform to the ISO 2011 C standard with GNU extensions\\.",
    "replacement": "遵循 ISO 1990 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Deprecated in favor of -std=gnu11.",
    "pattern": "Deprecated in favor of -std=gnu11\\.",
    "replacement": "已弃用，请改用 -std=gnu11。"
  },
  {
    "id": "Conform to the ISO 2017 C standard (published in 2018) with GNU extensions.",
    "pattern": "Conform to the ISO 2017 C standard \\(published in 2018\\) with GNU extensions\\.",
    "replacement": "遵循 ISO 1990 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Conform to the ISO 202X C standard draft with GNU extensions (experimental and incomplete support).",
    "pattern": "Conform to the ISO 202X C standard draft with GNU extensions \\(experimental and incomplete support\\)\\.",
    "replacement": "遵循 ISO 201z(7?) C++ 标准草案和 GNU 扩展(试验性质的不完全支持)"
  },
  {
    "id": "Conform to the ISO 1990 C standard with GNU extensions.",
    "pattern": "Conform to the ISO 1990 C standard with GNU extensions\\.",
    "replacement": "遵循 ISO 1990 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Conform to the ISO 1999 C standard with GNU extensions.",
    "pattern": "Conform to the ISO 1999 C standard with GNU extensions\\.",
    "replacement": "遵循 ISO 1999 C 标准，也支持 GNU 扩展"
  },
  {
    "id": "Deprecated in favor of -std=gnu99.",
    "pattern": "Deprecated in favor of -std=gnu99\\.",
    "replacement": "已弃用，请改用 -std=gnu99"
  },
  {
    "id": "Conform to the ISO 1990 C standard as amended in 1994.",
    "pattern": "Conform to the ISO 1990 C standard as amended in 1994\\.",
    "replacement": "遵循 ISO 1990 C 标准于 1994 年修订的版本"
  },
  {
    "id": "Deprecated in favor of -std=iso9899:1999.",
    "pattern": "Deprecated in favor of -std=iso9899:1999\\.",
    "replacement": "已弃用，为 -std=iso9899:1999 所取代"
  },
  {
    "id": "-stdlib=[libstdc++|libc++]\\tThe standard library to be used for C++ headers and runtime.",
    "pattern": "-stdlib=\\[libstdc\\+\\+\\|libc\\+\\+\\]\\tThe standard library to be used for C\\+\\+ headers and runtime\\.",
    "replacement": ""
  },
  {
    "id": "Enable traditional preprocessing.",
    "pattern": "Enable traditional preprocessing\\.",
    "replacement": "启用传统预处理。"
  },
  {
    "id": "-trigraphs\\tSupport ISO C trigraphs.",
    "pattern": "-trigraphs\\tSupport ISO C trigraphs\\.",
    "replacement": "-trigraphs\\t支持 ISO C 三元符。"
  },
  {
    "id": "Do not predefine system-specific and GCC-specific macros.",
    "pattern": "Do not predefine system-specific and GCC-specific macros\\.",
    "replacement": "不预定义系统或 GCC 特定的宏"
  },
  {
    "id": "<built-in>",
    "pattern": "<built-in>",
    "replacement": "<内置>"
  },
  {
    "id": "Please submit a full bug report, with preprocessed source.\\n",
    "pattern": "Please submit a full bug report, with preprocessed source\\.\\n",
    "replacement": "请提交一份完整的错误报告，\\n如有可能请附上经预处理后的源文件。\\n"
  },
  {
    "id": "Please submit a full bug report, with preprocessed source (by using -freport-bug).\\n",
    "pattern": "Please submit a full bug report, with preprocessed source \\(by using -freport-bug\\)\\.\\n",
    "replacement": "请提交一份完整的错误报告，\\n如有可能请附上经预处理后的源文件。\\n"
  },
  {
    "id": "Please include the complete backtrace with any bug report.\\n",
    "pattern": "Please include the complete backtrace with any bug report\\.\\n",
    "replacement": ""
  },
  {
    "id": "internal compiler error: error reporting routines re-entered.\\n",
    "pattern": "internal compiler error: error reporting routines re-entered\\.\\n",
    "replacement": "内部编译器错误：重入错误报告程序。\\n"
  },
  {
    "id": "    inlined from %qs at %r%s:%d%R",
    "pattern": "    inlined from '(.+?)' at ",
    "replacement": "    内联自 '$1' 于 "
  },
  {
    "id": "the '+' printf flag",
    "pattern": "the '\\+' printf flag",
    "replacement": "'+' printf 标记"
  },
  {
    "id": "'#' flag",
    "pattern": "'#' flag",
    "replacement": "'#' 标记"
  },
  {
    "id": "the '#' printf flag",
    "pattern": "the '#' printf flag",
    "replacement": "'#' printf 标记"
  },
  {
    "id": "'0' flag",
    "pattern": "'0' flag",
    "replacement": "'0' 标记"
  },
  {
    "id": "''' flag",
    "pattern": "''' flag",
    "replacement": "''' 标记"
  },
  {
    "id": "field width",
    "pattern": "field width",
    "replacement": "域宽"
  },
  {
    "id": "field width in printf format",
    "pattern": "field width in printf format",
    "replacement": "printf 格式的字段宽度"
  },
  {
    "id": "precision",
    "pattern": "precision",
    "replacement": "精度"
  },
  {
    "id": "precision in printf format",
    "pattern": "precision in printf format",
    "replacement": "printf 格式的精度"
  },
  {
    "id": "length modifier",
    "pattern": "length modifier",
    "replacement": "长度修饰符"
  },
  {
    "id": "length modifier in printf format",
    "pattern": "length modifier in printf format",
    "replacement": "printf 格式的长度修饰符"
  },
  {
    "id": "expected %<else%>",
    "pattern": "expected 'else'",
    "replacement": "需要%<delete%>"
  },
  {
    "id": "<message unknown at compile time>",
    "pattern": "<message unknown at compile time>",
    "replacement": ""
  },
  {
    "id": "%r%s:%d:%R   [ skipping %d instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\\n",
    "pattern": "   \\[ skipping (\\d+) instantiation contexts, use -ftemplate-backtrace-limit=0 to disable \\]\\n",
    "replacement": "   [ 跳过 $1 个实例化上下文，使用 -ftemplate-backtrace-limit=0 以禁用 ]\\n"
  },
  {
    "id": "%r%s:%d:%R   in %<constexpr%> expansion of %qs",
    "pattern": "   in 'constexpr' expansion of '(.+?)'",
    "replacement": "   在 '$1' 的 'constexpr' 展开中"
  },
  {
    "id": "missing filename after %qs",
    "pattern": "missing filename after '(.+?)'",
    "replacement": "%qs后缺少文件名"
  },
  {
    "id": "argument %qs to %<-Wbidi-chars%> not recognized",
    "pattern": "argument '(.+?)' to '-Wbidi-chars' not recognized",
    "replacement": "实参%qs(给予%<-Wnormalized%>)无法识别"
  },
  {
    "id": "%qE attribute directive ignored",
    "pattern": "'(.+?)' attribute directive ignored",
    "replacement": "'$1' 特性指令已忽略"
  },
  {
    "id": "%qE attribute ignored",
    "pattern": "'(.+?)' attribute ignored",
    "replacement": "%qE属性被忽略"
  },
  {
    "id": "%qD specified bound %E equals destination size",
    "pattern": "'(.+?)' specified bound (.+?) equals destination size",
    "replacement": "'$1' 指明边界 $2 等于目标大小"
  },
  {
    "id": "PDP11 bit-field handling unsupported in %qs",
    "pattern": "PDP11 bit-field handling unsupported in '(.+?)'",
    "replacement": ""
  },
  {
    "id": "single %<target_clones%> attribute is ignored",
    "pattern": "single 'target_clones' attribute is ignored",
    "replacement": "%qE不兼容的属性已被忽略"
  },
  {
    "id": "%qs pointer is null",
    "pattern": "'(.+?)' pointer is null",
    "replacement": "'$1' 指针为空"
  },
  {
    "id": "argument %u null where non-null expected",
    "pattern": "argument (\\d+?) null where non-null expected",
    "replacement": ""
  },
  {
    "id": "%qD writing one too many bytes into a region of a size that depends on %<strlen%>",
    "pattern": "'(.+?)' writing one too many bytes into a region of a size that depends on 'strlen'",
    "replacement": ""
  },
  {
    "id": "writing one too many bytes into a region of a size that depends on %<strlen%>",
    "pattern": "writing one too many bytes into a region of a size that depends on 'strlen'",
    "replacement": ""
  },
  {
    "id": "%qD writing %wu byte into a region of size %wu",
    "pattern": "'(.+?)' writing (\\d+?) byte into a region of size (\\d+?)",
    "replacement": ""
  },
  {
    "id": "writing %wu byte into a region of size %wu",
    "pattern": "writing (\\d+?) byte into a region of size (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD writing %wu byte into a region of size between %wu and %wu",
    "pattern": "'(.+?)' writing (\\d+?) byte into a region of size between (\\d+?) and (\\d+?)",
    "replacement": ""
  },
  {
    "id": "writing %wu byte into a region of size between %wu and %wu",
    "pattern": "writing (\\d+?) byte into a region of size between (\\d+?) and (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD writing between %wu and %wu bytes into a region of size %wu",
    "pattern": "'(.+?)' writing between (\\d+?) and (\\d+?) bytes into a region of size (\\d+?)",
    "replacement": ""
  },
  {
    "id": "writing between %wu and %wu bytes into a region of size %wu",
    "pattern": "writing between (\\d+?) and (\\d+?) bytes into a region of size (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD writing between %wu and %wu bytes into a region of size between %wu and %wu",
    "pattern": "'(.+?)' writing between (\\d+?) and (\\d+?) bytes into a region of size between (\\d+?) and (\\d+?)",
    "replacement": ""
  },
  {
    "id": "writing between %wu and %wu bytes into a region of size between %wu and %wu",
    "pattern": "writing between (\\d+?) and (\\d+?) bytes into a region of size between (\\d+?) and (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD output truncated before terminating nul copying %E byte from a string of the same length",
    "pattern": "'(.+?)' output truncated before terminating nul copying (.+?) byte from a string of the same length",
    "replacement": ""
  },
  {
    "id": "%qD output truncated copying %E byte from a string of length %wu",
    "pattern": "'(.+?)' output truncated copying (.+?) byte from a string of length (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD output truncated copying between %wu and %wu bytes from a string of length %wu",
    "pattern": "'(.+?)' output truncated copying between (\\d+?) and (\\d+?) bytes from a string of length (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD output may be truncated copying %E byte from a string of length %wu",
    "pattern": "'(.+?)' output may be truncated copying (.+?) byte from a string of length (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD output may be truncated copying between %wu and %wu bytes from a string of length %wu",
    "pattern": "'(.+?)' output may be truncated copying between (\\d+?) and (\\d+?) bytes from a string of length (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qD output truncated before terminating nul copying as many bytes from a string as its length",
    "pattern": "'(.+?)' output truncated before terminating nul copying as many bytes from a string as its length",
    "replacement": ""
  },
  {
    "id": "%qD specified bound depends on the length of the source argument",
    "pattern": "'(.+?)' specified bound depends on the length of the source argument",
    "replacement": ""
  },
  {
    "id": "%qD of a string of length %wu or more and an array of size %wu evaluates to nonzero",
    "pattern": "'(.+?)' of a string of length (\\d+?) or more and an array of size (\\d+?) evaluates to nonzero",
    "replacement": ""
  },
  {
    "id": "%qD of a string of length %wu and an array of size %wu evaluates to nonzero",
    "pattern": "'(.+?)' of a string of length (\\d+?) and an array of size (\\d+?) evaluates to nonzero",
    "replacement": ""
  },
  {
    "id": "%qD of strings of length %wu and %wu and bound of %wu evaluates to nonzero",
    "pattern": "'(.+?)' of strings of length (\\d+?) and (\\d+?) and bound of (\\d+?) evaluates to nonzero",
    "replacement": ""
  },
  {
    "id": "%qD of a string of length %wu, an array of size %wu and bound of %wu evaluates to nonzero",
    "pattern": "'(.+?)' of a string of length (\\d+?), an array of size (\\d+?) and bound of (\\d+?) evaluates to nonzero",
    "replacement": ""
  },
  {
    "id": "%qD is used uninitialized",
    "pattern": "'(.+?)' is used uninitialized",
    "replacement": "'$1' 在使用时未初始化"
  },
  {
    "id": "%qD may be used uninitialized",
    "pattern": "'(.+?)' may be used uninitialized",
    "replacement": "'$1' 在使用时可能未初始化"
  },
  {
    "id": "%qs is used uninitialized",
    "pattern": "'(.+?)' is used uninitialized",
    "replacement": "'$1' 在使用时未初始化"
  },
  {
    "id": "%qs may be used uninitialized",
    "pattern": "'(.+?)' may be used uninitialized",
    "replacement": "'$1' 在使用时可能未初始化"
  },
  {
    "id": "%qs was declared here",
    "pattern": "'(.+?)' was declared here",
    "replacement": "'$1' 在此声明"
  },
  {
    "id": "%qE may be used uninitialized",
    "pattern": "'(.+?)' may be used uninitialized",
    "replacement": "'$1' 在使用时可能未初始化"
  },
  {
    "id": "accessing argument %u of a function declared with attribute %<%s%>",
    "pattern": "accessing argument (\\d+?) of a function declared with attribute '(.+?)'",
    "replacement": "忽略声明有 warn_unused_result 属性的函数的返回值"
  },
  {
    "id": "%qE is used uninitialized",
    "pattern": "'(.+?)' is used uninitialized",
    "replacement": "'$1' 在使用时未初始化"
  },
  {
    "id": "packed layout",
    "pattern": "packed layout",
    "replacement": "使用紧实的堆栈布局"
  },
  {
    "id": "%qE attribute ignored due to conflict with %qs attribute",
    "pattern": "'(.+?)' attribute ignored due to conflict with '(.+?)' attribute",
    "replacement": "%qE属性与 %s 属性冲突"
  },
  {
    "id": "%qE attribute has no effect on unit local functions",
    "pattern": "'(.+?)' attribute has no effect on unit local functions",
    "replacement": "%qE属性只能用于函数"
  },
  {
    "id": "%qE attribute ignored because %qD is not a local variable",
    "pattern": "'(.+?)' attribute ignored because '(.+?)' is not a local variable",
    "replacement": "%qE属性被忽略，因为%qT已被定义"
  },
  {
    "id": "section of %q+D conflicts with previous declaration",
    "pattern": "section of '(.+?)' conflicts with previous declaration",
    "replacement": "%q+D的节与早先的声明冲突"
  },
  {
    "id": "%+qD declared %qE after being used",
    "pattern": "%\\+qD declared '(.+?)' after being used",
    "replacement": "%q+D声明为友元"
  },
  {
    "id": "the message attached to %<unavailable%> is not a string",
    "pattern": "the message attached to 'unavailable' is not a string",
    "replacement": ""
  },
  {
    "id": "number of vector components %wu not a power of two",
    "pattern": "number of vector components (\\d+?) not a power of two",
    "replacement": "向量中分量数不是 2 的某次方"
  },
  {
    "id": "number of vector components %wu exceeds %d",
    "pattern": "number of vector components (\\d+?) exceeds (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%qE attribute only supported on non-mask vector types",
    "pattern": "'(.+?)' attribute only supported on non-mask vector types",
    "replacement": "%qE属性在不是类的类型上被忽略"
  },
  {
    "id": "%qE attribute argument not a string constant",
    "pattern": "'(.+?)' attribute argument not a string constant",
    "replacement": "%qE属性需要一个字符串常量作为实参"
  },
  {
    "id": "%qE attribute ignored; valid only for functions and function pointer fields",
    "pattern": "'(.+?)' attribute ignored; valid only for functions and function pointer fields",
    "replacement": "%qE属性只能用于函数类型"
  },
  {
    "id": "%qE attribute ignored; field must be a function pointer",
    "pattern": "'(.+?)' attribute ignored; field must be a function pointer",
    "replacement": "%qE属性只能用于函数类型"
  },
  {
    "id": "%qs attribute not supported for %qE in %<__builtin_has_attribute%>",
    "pattern": "'(.+?)' attribute not supported for '(.+?)' in '__builtin_has_attribute'",
    "replacement": "%qE属性在 R8C 目标机上不受支持"
  },
  {
    "id": "%<__builtin_shufflevector%> arguments must be vectors",
    "pattern": "'__builtin_shufflevector' arguments must be vectors",
    "replacement": "%<__builtin___clear_cache%>的两个参数必须都是指针"
  },
  {
    "id": "%<__builtin_shufflevector%> arguments must be constant size vectors",
    "pattern": "'__builtin_shufflevector' arguments must be constant size vectors",
    "replacement": "%<__builtin___clear_cache%>的两个参数必须都是指针"
  },
  {
    "id": "%<__builtin_shufflevector%> argument vectors must have the same element type",
    "pattern": "'__builtin_shufflevector' argument vectors must have the same element type",
    "replacement": "%4$L处‘%3$s’内建函数的‘%1$s’和‘%2$s’实参类型必须相同"
  },
  {
    "id": "%<__builtin_shufflevector%> must specify a result with a power of two number of elements",
    "pattern": "'__builtin_shufflevector' must specify a result with a power of two number of elements",
    "replacement": ""
  },
  {
    "id": "invalid element index %qE to %<__builtin_shufflevector%>",
    "pattern": "invalid element index '(.+?)' to '__builtin_shufflevector'",
    "replacement": "%<__builtin_frame_address%>的实参无效"
  },
  {
    "id": "too many arguments to function %qE",
    "pattern": "too many arguments to function '(.+?)'",
    "replacement": "传递给函数 '$1' 的实参太多"
  },
  {
    "id": "non-floating-point arguments in call to function %qE",
    "pattern": "non-floating-point arguments in call to function '(.+?)'",
    "replacement": "给予函数%qE的参数不是浮点数"
  },
  {
    "id": "%s %<%s%.*s%> expects argument of type %<%T%s%>, but argument %d has type %qT",
    "pattern": "(.+?) '(.+?)%\\.\\*s' expects argument of type '(.+?)(.+?)', but argument (\\d+?) has type '(.+?)'",
    "replacement": "格式%q.*s需要类型%<%s%s%>，但实参 %d 的类型为%qT"
  },
  {
    "id": "%s %<%s%.*s%> expects a matching %<%T%s%> argument",
    "pattern": "(.+?) '(.+?)%\\.\\*s' expects a matching '(.+?)(.+?)' argument",
    "replacement": "对%<%T::%s(%A)%#V%>的调用没有匹配的函数"
  },
  {
    "id": "stray %<\\\\%o%> in program",
    "pattern": "stray '\\\\(\\d+?)' in program",
    "replacement": "程序中有游离的 '\\$1'"
  },
  {
    "id": "%<#pragma omp atomic compare capture%> with non-integral comparison result",
    "pattern": "'#pragma omp atomic compare capture' with non-integral comparison result",
    "replacement": "%<# pragma omp 基元的 capture%>使用两不同的变量用于内存"
  },
  {
    "id": "the %qs debug info cannot be used with pre-compiled headers",
    "pattern": "the '(.+?)' debug info cannot be used with pre-compiled headers",
    "replacement": ""
  },
  {
    "id": "cannot write %s: %m",
    "pattern": "cannot write (.+?): ",
    "replacement": "无法写入 $1："
  },
  {
    "id": "missing %<big-endian%>, %<little-endian%>, or %<default%> after %<#pragma scalar_storage_order%>",
    "pattern": "missing 'big-endian', 'little-endian', or 'default' after '#pragma scalar_storage_order'",
    "replacement": ""
  },
  {
    "id": "expected %<big-endian%>, %<little-endian%>, or %<default%> after %<#pragma scalar_storage_order%>",
    "pattern": "expected 'big-endian', 'little-endian', or 'default' after '#pragma scalar_storage_order'",
    "replacement": ""
  },
  {
    "id": "missing %<error%>, %<warning%>, %<ignored%>, %<push%>, %<pop%>, or %<ignored_attributes%> after %<#pragma GCC diagnostic%>",
    "pattern": "missing 'error', 'warning', 'ignored', 'push', 'pop', or 'ignored_attributes' after '#pragma GCC diagnostic'",
    "replacement": "%<#pragma GCC diagnostic%>后缺少 error、warning 或 ignored"
  },
  {
    "id": "missing attribute name after %<#pragma GCC diagnostic ignored_attributes%>",
    "pattern": "missing attribute name after '#pragma GCC diagnostic ignored_attributes'",
    "replacement": "%<#pragma GCC diagnostic%>后选项缺失"
  },
  {
    "id": "missing argument to %<#pragma GCC diagnostic ignored_attributes%>",
    "pattern": "missing argument to '#pragma GCC diagnostic ignored_attributes'",
    "replacement": "%<#pragma GCC diagnostic%>后选项缺失"
  },
  {
    "id": "trailing %<,%> in arguments for %<#pragma GCC diagnostic ignored_attributes%>",
    "pattern": "trailing ',' in arguments for '#pragma GCC diagnostic ignored_attributes'",
    "replacement": "%<#pragma GCC diagnostic%>后选项缺失"
  },
  {
    "id": "expected %<error%>, %<warning%>, %<ignored%>, %<push%>, %<pop%>, %<ignored_attributes%> after %<#pragma GCC diagnostic%>",
    "pattern": "expected 'error', 'warning', 'ignored', 'push', 'pop', 'ignored_attributes' after '#pragma GCC diagnostic'",
    "replacement": "%<#pragma GCC diagnostic%>后需要 error、warning 或 ignored"
  },
  {
    "id": "%<#pragma message: %s%>",
    "pattern": "'#pragma message: (.+?)'",
    "replacement": "#pragma message：%s"
  },
  {
    "id": "previously declared as %s with bound %qs",
    "pattern": "previously declared as (.+?) with bound '(.+?)'",
    "replacement": "先前的声明%q+D"
  },
  {
    "id": "comparison between two arrays is deprecated in C++20",
    "pattern": "comparison between two arrays is deprecated in C\\+\\+20",
    "replacement": "比较指针和整数"
  },
  {
    "id": "comparison between two arrays",
    "pattern": "comparison between two arrays",
    "replacement": "在%qT和%qT间比较"
  },
  {
    "id": "use unary %<+%> which decays operands to pointers or %<&%D[0] %s &%D[0]%> to compare the addresses",
    "pattern": "use unary '\\+' which decays operands to pointers or '&(\\d+?)\\[0\\] (.+?) &(\\d+?)\\[0\\]' to compare the addresses",
    "replacement": ""
  },
  {
    "id": "use %<&%D[0] %s &%D[0]%> to compare the addresses",
    "pattern": "use '&(\\d+?)\\[0\\] (.+?) &(\\d+?)\\[0\\]' to compare the addresses",
    "replacement": ""
  },
  {
    "id": "%qs is defined in header %qs; did you forget to %<#include %s%>?",
    "pattern": "'(.+?)' is defined in header '(.+?)'; did you forget to '#include (.+?)'\\?",
    "replacement": ""
  },
  {
    "id": "expected expression",
    "pattern": "expected expression",
    "replacement": "需要表达式"
  },
  {
    "id": "expected %<none%>, %<shared%>, %<private%> or %<firstprivate%>",
    "pattern": "expected 'none', 'shared', 'private' or 'firstprivate'",
    "replacement": "需要%<class%>、%<typename%>或%<template%>"
  },
  {
    "id": "expected %<reproducible%> or %<unconstrained%>",
    "pattern": "expected 'reproducible' or 'unconstrained'",
    "replacement": "需要%<none%>或%<shared%>"
  },
  {
    "id": "%<num_teams%> lower bound %qE bigger than upper bound %qE",
    "pattern": "'num_teams' lower bound '(.+?)' bigger than upper bound '(.+?)'",
    "replacement": ""
  },
  {
    "id": "%<allocate%> clause %<align%> modifier argument needs to be positive constant power of two integer expression",
    "pattern": "'allocate' clause 'align' modifier argument needs to be positive constant power of two integer expression",
    "replacement": "%H折叠变量需要正整常数表达式"
  },
  {
    "id": "too many %<always%> modifiers",
    "pattern": "too many 'always' modifiers",
    "replacement": "太多的%qs子句"
  },
  {
    "id": "too many %<close%> modifiers",
    "pattern": "too many 'close' modifiers",
    "replacement": "太多的%qs子句"
  },
  {
    "id": "%<#pragma omp target%> with modifier other than %<always%> or %<close%> on %<map%> clause",
    "pattern": "'#pragma omp target' with modifier other than 'always' or 'close' on 'map' clause",
    "replacement": "%<#pragma omp taskwait%>只能用在复合语句中"
  },
  {
    "id": "%<ancestor%> device modifier not preceded by %<requires%> directive with %<reverse_offload%> clause",
    "pattern": "'ancestor' device modifier not preceded by 'requires' directive with 'reverse_offload' clause",
    "replacement": ""
  },
  {
    "id": "expected %<ancestor%> or %<device_num%>",
    "pattern": "expected 'ancestor' or 'device_num'",
    "replacement": "需要%<none%>或%<shared%>"
  },
  {
    "id": "the %<device%> clause expression must evaluate to %<1%>",
    "pattern": "the 'device' clause expression must evaluate to '1'",
    "replacement": "调度块大小表达式必须为整型"
  },
  {
    "id": "expected %<seq_cst%>, %<acquire%> or %<relaxed%>",
    "pattern": "expected 'seq_cst', 'acquire' or 'relaxed'",
    "replacement": "需要%<class%>、%<typename%>或%<template%>"
  },
  {
    "id": "expected %<read%>, %<write%>, %<update%>, %<capture%>, %<compare%>, %<weak%>, %<fail%>, %<seq_cst%>, %<acq_rel%>, %<release%>, %<relaxed%> or %<hint%> clause",
    "pattern": "expected 'read', 'write', 'update', 'capture', 'compare', 'weak', 'fail', 'seq_cst', 'acq_rel', 'release', 'relaxed' or 'hint' clause",
    "replacement": "需要标识符或%<(%>"
  },
  {
    "id": "%qs clause is incompatible with %<read%> or %<write%> clauses",
    "pattern": "'(.+?)' clause is incompatible with 'read' or 'write' clauses",
    "replacement": "%<#pragma omp taskwait%>只能用在复合语句中"
  },
  {
    "id": "%qs clause requires %qs clause",
    "pattern": "'(.+?)' clause requires '(.+?)' clause",
    "replacement": "%qT作为%qs被引用"
  },
  {
    "id": "%<#pragma omp atomic read%> incompatible with %<release%> clause",
    "pattern": "'#pragma omp atomic read' incompatible with 'release' clause",
    "replacement": "%<#pragma omp taskwait%>只能用在复合语句中"
  },
  {
    "id": "%<#pragma omp atomic write%> incompatible with %<acquire%> clause",
    "pattern": "'#pragma omp atomic write' incompatible with 'acquire' clause",
    "replacement": "%<#pragma omp taskwait%>只能用在复合语句中"
  },
  {
    "id": "expected %<==%> comparison in %<if%> condition",
    "pattern": "expected '==' comparison in 'if' condition",
    "replacement": "联合定义后需要%<;%>"
  },
  {
    "id": "expected %<==%>, %<<%> or %<>%> comparison in %<if%> condition",
    "pattern": "expected '==', '<' or '>' comparison in 'if' condition",
    "replacement": ""
  },
  {
    "id": "invalid form of %<#pragma omp atomic compare%>",
    "pattern": "invalid form of '#pragma omp atomic compare'",
    "replacement": "%<#pragma omp atomic%>运算符无效"
  },
  {
    "id": "unexpected %<else%>",
    "pattern": "unexpected 'else'",
    "replacement": "需要%<delete%>"
  },
  {
    "id": "invalid form of %<pragma omp atomic compare%>",
    "pattern": "invalid form of 'pragma omp atomic compare'",
    "replacement": "%<#pragma omp atomic%>运算符无效"
  },
  {
    "id": "%<weak%> clause requires atomic equality comparison",
    "pattern": "'weak' clause requires atomic equality comparison",
    "replacement": ""
  },
  {
    "id": "expected %<seq_cst%>, %<acq_rel%>, %<release%> or %<acquire%>",
    "pattern": "expected 'seq_cst', 'acq_rel', 'release' or 'acquire'",
    "replacement": "需要%<class%>、%<typename%>或%<template%>"
  },
  {
    "id": "expected %<at%>, %<severity%> or %<message%> clause",
    "pattern": "expected 'at', 'severity' or 'message' clause",
    "replacement": "需要 %<;%>、%<,%> 或 %<)%>"
  },
  {
    "id": "expected %qs or %qs",
    "pattern": "expected '(.+?)' or '(.+?)'",
    "replacement": "需要 %<,%> 或 %<)%>"
  },
  {
    "id": "%<#pragma omp error%> with %<at(execution)%> clause may only be used in compound statements",
    "pattern": "'#pragma omp error' with 'at\\(execution\\)' clause may only be used in compound statements",
    "replacement": "%<#pragma omp barrier%>只能用在复合语句中"
  },
  {
    "id": "%<pragma omp error%> encountered: %s",
    "pattern": "'pragma omp error' encountered: ",
    "replacement": "遇到了 'pragma omp error'："
  },
  {
    "id": "%<pragma omp error%> encountered",
    "pattern": "'pragma omp error' encountered",
    "replacement": ""
  },
  {
    "id": "cannot dereference %qE in %qs clause",
    "pattern": "cannot dereference '(.+?)' in '(.+?)' clause",
    "replacement": "字段%qE的类型不完全"
  },
  {
    "id": "%qE is not a variable in %qs clause",
    "pattern": "'(.+?)' is not a variable in '(.+?)' clause",
    "replacement": "'$1' 不是子句 '$2' 中的变量"
  },
  {
    "id": "%qE is not a variable in clause %qs",
    "pattern": "'(.+?)' is not a variable in clause '(.+?)'",
    "replacement": "'$1' 不是 '$2' 子句中的变量"
  },
  {
    "id": "%qD appears more than once in data-sharing clauses",
    "pattern": "'(.+?)' appears more than once in data-sharing clauses",
    "replacement": "%qD在数据子句中多次出现"
  },
  {
    "id": "%qE is not lvalue expression nor array section in %qs clause",
    "pattern": "'(.+?)' is not lvalue expression nor array section in '(.+?)' clause",
    "replacement": "%qE在子句%<lastprivate%>中不是一个变量"
  },
  {
    "id": "%qD does not have a mappable type in %qs clause",
    "pattern": "'(.+?)' does not have a mappable type in '(.+?)' clause",
    "replacement": "'$1' 在 '$2' 子句中不具有可映射类型"
  },
  {
    "id": "%qE is not an argument in %<uniform%> clause",
    "pattern": "'(.+?)' is not an argument in 'uniform' clause",
    "replacement": "'$1' 不是 'uniform' 子句的实参"
  },
  {
    "id": "%s%<%D(%T, %T)%> (built-in)",
    "pattern": "(.+?)'(\\d+?)\\((.+?), (.+?)\\)' \\(built-in\\)",
    "replacement": "%s%D(%T, %T) <内建>"
  },
  {
    "id": "%s%<%D(%T)%> (built-in)",
    "pattern": "(.+?)'(\\d+?)\\((.+?)\\)' \\(built-in\\)",
    "replacement": "%s%D(%T) <内建>"
  },
  {
    "id": "%<operator%s%>",
    "pattern": "'operator(.+?)'",
    "replacement": "单目数值运算符‘%s’(位于 %%L)的操作数为 %s"
  },
  {
    "id": "%<operator[]%>",
    "pattern": "'operator\\[\\]'",
    "replacement": "错误的运算符"
  },
  {
    "id": "%<operator[]%> in %<%E[%E]%>",
    "pattern": "'operator\\[\\]' in '(.+?)\\[(.+?)\\]'",
    "replacement": "%<%E::%E%>不是一个类型"
  },
  {
    "id": "%qs in %<%s %E%>",
    "pattern": "'(.+?)' in '(.+?) (.+?)'",
    "replacement": "%Xbfd_openr %s: %E\\n"
  },
  {
    "id": "%<operator %s%>",
    "pattern": "'operator (.+?)'",
    "replacement": "单目数值运算符‘%s’(位于 %%L)的操作数为 %s"
  },
  {
    "id": "%<operator %s%> in %<%s%E%>",
    "pattern": "'operator (.+?)' in '(.+?)(.+?)'",
    "replacement": "%Xbfd_openr %s: %E\\n"
  },
  {
    "id": "%<operator%s%> in %<%E %s %E%>",
    "pattern": "'operator(.+?)' in '(.+?) (.+?) (.+?)'",
    "replacement": "在协议中找到%<-%E%>而非%<+%E%>"
  },
  {
    "id": "%<operator%s%> in %<%s%E%>",
    "pattern": "'operator(.+?)' in '(.+?)(.+?)'",
    "replacement": "%Xbfd_openr %s: %E\\n"
  },
  {
    "id": "conversion of scalar %qH to vector %qI involves truncation",
    "pattern": "conversion of scalar '(.+?)' to vector '(.+?)' involves truncation",
    "replacement": "从标量 '(.+?)' 到向量 '(.+?)' 的转换引入截断"
  },
  {
    "id": "no match for call to %<%T::operator[] (%A)%>",
    "pattern": "no match for call to '(.+?)'",
    "replacement": "对 '$1' 的调用没有匹配"
  },
  {
    "id": "call of %<%T::operator[] (%A)%> is ambiguous",
    "pattern": "call of '(.+?)' is ambiguous",
    "replacement": "对 '$1' 的调用有歧义"
  },
  {
    "id": "destroying delete %qD cannot be used to release the allocated memory if the initialization throws because the object is not constructed yet",
    "pattern": "destroying delete '(.+?)' cannot be used to release the allocated memory if the initialization throws because the object is not constructed yet",
    "replacement": ""
  },
  {
    "id": "cannot bind lvalue reference of type %qH to an rvalue of type %qI",
    "pattern": "cannot bind lvalue reference of type '(.+?)' to an rvalue of type '(.+?)'",
    "replacement": "将类型为%2$qT的右值转换为%1$qT的 volatile 引用"
  },
  {
    "id": "%qD writing to an object of type %#qT with no trivial copy-assignment%s",
    "pattern": "'(.+?)' writing to an object of type '(.+?)' with no trivial copy-assignment(.+?)",
    "replacement": ""
  },
  {
    "id": "%qD writing to an object of a non-trivial type %#qT leaves %wu byte unchanged",
    "pattern": "'(.+?)' writing to an object of a non-trivial type '(.+?)' leaves (\\d+?) byte unchanged",
    "replacement": ""
  },
  {
    "id": "argument %u in call to function %qE has pointer to a non-trivially-copyable type (%qT)",
    "pattern": "argument (\\d+?) in call to function '(.+?)' has pointer to a non-trivially-copyable type \\('(.+?)'\\)",
    "replacement": "%K%D 的第一个实参必须是一个指针，第二个必须是整常量"
  },
  {
    "id": "no matching function for call to %<%s(%A)%>",
    "pattern": "no matching function for call to '(.+?)'",
    "replacement": "对 '$1' 的调用没有匹配的函数"
  },
  {
    "id": "call of overloaded %<%s(%A)%> is ambiguous",
    "pattern": "call of overloaded '(.+?)' is ambiguous",
    "replacement": "对有重载的 '$1' 的调用有歧义"
  },
  {
    "id": "offset of %qT base class for %<-std=c++14%> and up changes in %<-fabi-version=17%> (GCC 12)",
    "pattern": "offset of '(.+?)' base class for '-std=c\\+\\+14' and up changes in '-fabi-version=17' \\(GCC 12\\)",
    "replacement": ""
  },
  {
    "id": "offset of %qD for %<-std=c++14%> and up changes in %<-fabi-version=17%> (GCC 12)",
    "pattern": "offset of '(.+?)' for '-std=c\\+\\+14' and up changes in '-fabi-version=17' \\(GCC 12\\)",
    "replacement": "%qD的对齐"
  },
  {
    "id": "variable %qD of non-literal type %qT in %<constexpr%> function only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "variable '(.+?)' of non-literal type '(.+?)' in 'constexpr' function only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x %<constexpr%>只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "calling constexpr member function %qD through virtual base subobject",
    "pattern": "calling constexpr member function '(.+?)' through virtual base subobject",
    "replacement": "没有对象无法调用成员函数%qD"
  },
  {
    "id": "use of %qD",
    "pattern": "use of '(.+?)'",
    "replacement": "错误地使用了%qD"
  },
  {
    "id": "its value can vary between compiler versions or with different %<-mtune%> or %<-mcpu%> flags",
    "pattern": "its value can vary between compiler versions or with different '-mtune' or '-mcpu' flags",
    "replacement": ""
  },
  {
    "id": "if this use is part of a public ABI, change it to instead use a constant variable you define",
    "pattern": "if this use is part of a public ABI, change it to instead use a constant variable you define",
    "replacement": ""
  },
  {
    "id": "the default value for the current CPU tuning is %d bytes",
    "pattern": "the default value for the current CPU tuning is (\\d+?) bytes",
    "replacement": ""
  },
  {
    "id": "you can stabilize this value with %<--param hardware_destructive_interference_size=%d%>, or disable this warning with %<-Wno-interference-size%>",
    "pattern": "you can stabilize this value with '--param hardware_destructive_interference_size=(\\d+?)', or disable this warning with '-Wno-interference-size'",
    "replacement": ""
  },
  {
    "id": "control passes through definition of %qD with thread storage duration",
    "pattern": "control passes through definition of '(.+?)' with thread storage duration",
    "replacement": ""
  },
  {
    "id": "control passes through definition of %qD with static storage duration",
    "pattern": "control passes through definition of '(.+?)' with static storage duration",
    "replacement": "截取的变量 %qD 与 non-automatic 贮藏体持续时间"
  },
  {
    "id": "%qD defined %<thread_local%> in %<constexpr%> context",
    "pattern": "'(.+?)' defined 'thread_local' in 'constexpr' context",
    "replacement": "函数%qs的存储类%<__thread%>无效"
  },
  {
    "id": "%qD defined %<static%> in %<constexpr%> context",
    "pattern": "'(.+?)' defined 'static' in 'constexpr' context",
    "replacement": "非静态数据成员%qE被声明为%<constexpr%>"
  },
  {
    "id": "neither branch of %<if%> is a constant expression",
    "pattern": "neither branch of 'if' is a constant expression",
    "replacement": "整型表达式%qE不是常量"
  },
  {
    "id": "label definition in %<constexpr%> function only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "label definition in 'constexpr' function only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x %<constexpr%>只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "constraint expression does not have type %<bool%>",
    "pattern": "constraint expression does not have type 'bool'",
    "replacement": "取一个类型为%<void%>的表达式的地址"
  },
  {
    "id": "function call of variable concept %qE",
    "pattern": "function call of variable concept '(.+?)'",
    "replacement": "有歧义的模板特例化%qD(为%q+D)"
  },
  {
    "id": "MAP %qD TO %qT",
    "pattern": "MAP '(.+?)' TO '(.+?)'",
    "replacement": ""
  },
  {
    "id": "MAP %qD TO %qE",
    "pattern": "MAP '(.+?)' TO '(.+?)'",
    "replacement": ""
  },
  {
    "id": "argument %qT",
    "pattern": "argument '(.+?)'",
    "replacement": "没有参数"
  },
  {
    "id": "argument %qE",
    "pattern": "argument '(.+?)'",
    "replacement": "%L处内建 REPEAT 的 NCOPIES 实参是负的"
  },
  {
    "id": "%qT does not match original declaration",
    "pattern": "'(.+?)' does not match original declaration",
    "replacement": "类型%qD不匹配原先的声明"
  },
  {
    "id": "original template declaration here",
    "pattern": "original template declaration here",
    "replacement": "%q+D已在此声明过"
  },
  {
    "id": "no matching concepts for %qE",
    "pattern": "no matching concepts for '(.+?)'",
    "replacement": "没有找到与%qD匹配的模板"
  },
  {
    "id": "%qE cannot be introduced with an ellipsis %<...%>",
    "pattern": "'(.+?)' cannot be introduced with an ellipsis '\\.\\.\\.'",
    "replacement": ""
  },
  {
    "id": "prototype declared here",
    "pattern": "prototype declared here",
    "replacement": "以前在此声明过"
  },
  {
    "id": "all template parameters of %qD must be introduced",
    "pattern": "all template parameters of '(.+?)' must be introduced",
    "replacement": "模板参数不能是友元"
  },
  {
    "id": "cannot deduce template parameters from introduction list",
    "pattern": "cannot deduce template parameters from introduction list",
    "replacement": "%qE不是类型%qT的有效模板实参，因为%qE不是一个变量"
  },
  {
    "id": "the required expression %qE is invalid, because",
    "pattern": "the required expression '(.+?)' is invalid, because",
    "replacement": "KIND 参数 %s 在%L处必须是初始化表达式"
  },
  {
    "id": "the required expression %qE is invalid",
    "pattern": "the required expression '(.+?)' is invalid",
    "replacement": "KIND 参数 %s 在%L处必须是初始化表达式"
  },
  {
    "id": "the required type %qT is invalid, because",
    "pattern": "the required type '(.+?)' is invalid, because",
    "replacement": "字段%qE的类型不完全"
  },
  {
    "id": "the required type %qT is invalid",
    "pattern": "the required type '(.+?)' is invalid",
    "replacement": "重复的基类型%qT无效"
  },
  {
    "id": "cannot convert %qE to %qT",
    "pattern": "cannot convert '(.+?)' to '(.+?)'",
    "replacement": "不能将 '$1' 转换为 '$2'"
  },
  {
    "id": "%qE is not %<noexcept%>",
    "pattern": "'(.+?)' is not 'noexcept'",
    "replacement": "%qE不是一个模板"
  },
  {
    "id": "%qE does not satisfy return-type-requirement, because",
    "pattern": "'(.+?)' does not satisfy return-type-requirement, because",
    "replacement": ""
  },
  {
    "id": "%qE does not satisfy return-type-requirement",
    "pattern": "'(.+?)' does not satisfy return-type-requirement",
    "replacement": "指令不满足其约束："
  },
  {
    "id": "cannot convert %qE to %qT because",
    "pattern": "cannot convert '(.+?)' to '(.+?)' because",
    "replacement": "不能将%qT转换为%qT"
  },
  {
    "id": "nested requirement %qE is not satisfied, because",
    "pattern": "nested requirement '(.+?)' is not satisfied, because",
    "replacement": ""
  },
  {
    "id": "nested requirement %qE is not satisfied",
    "pattern": "nested requirement '(.+?)' is not satisfied",
    "replacement": "析构函数不能被 cv 限定"
  },
  {
    "id": "satisfaction of atomic constraint %qE depends on itself",
    "pattern": "satisfaction of atomic constraint '(.+?)' depends on itself",
    "replacement": "在初次使用后显式特例化%qD"
  },
  {
    "id": "satisfaction value of atomic constraint %qE changed from %qE to %qE",
    "pattern": "satisfaction value of atomic constraint '(.+?)' changed from '(.+?)' to '(.+?)'",
    "replacement": "从%qT到%qT的转换丢失了限定信息"
  },
  {
    "id": "satisfaction value first evaluated to %qE from here",
    "pattern": "satisfaction value first evaluated to '(.+?)' from here",
    "replacement": ""
  },
  {
    "id": "no operand of the disjunction is satisfied",
    "pattern": "no operand of the disjunction is satisfied",
    "replacement": ""
  },
  {
    "id": "the operand %qE is unsatisfied because",
    "pattern": "the operand '(.+?)' is unsatisfied because",
    "replacement": ""
  },
  {
    "id": "definition of concept %qD is empty",
    "pattern": "definition of concept '(.+?)' is empty",
    "replacement": "%qs后缺少宏名"
  },
  {
    "id": "definition of concept %qD has multiple statements",
    "pattern": "definition of concept '(.+?)' has multiple statements",
    "replacement": ""
  },
  {
    "id": "  %qT is not %<nothrow%> copy assignable",
    "pattern": "  '(.+?)' is not 'nothrow' copy assignable",
    "replacement": ""
  },
  {
    "id": "  %qT is not %<nothrow%> default constructible",
    "pattern": "  '(.+?)' is not 'nothrow' default constructible",
    "replacement": "%q#T没有用户提供的默认构造函数"
  },
  {
    "id": "  %qT is not %<nothrow%> copy constructible",
    "pattern": "  '(.+?)' is not 'nothrow' copy constructible",
    "replacement": ""
  },
  {
    "id": "  %qT is not trivially copy assignable",
    "pattern": "  '(.+?)' is not trivially copy assignable",
    "replacement": "%qD不是一个变量"
  },
  {
    "id": "  %qT is not trivially default constructible",
    "pattern": "  '(.+?)' is not trivially default constructible",
    "replacement": "%q#T没有用户提供的默认构造函数"
  },
  {
    "id": "  %qT is not trivially copy constructible",
    "pattern": "  '(.+?)' is not trivially copy constructible",
    "replacement": "基类%q#T有一个非虚析构函数"
  },
  {
    "id": "  %qT is not trivially destructible",
    "pattern": "  '(.+?)' is not trivially destructible",
    "replacement": "基类%q#T有一个非虚析构函数"
  },
  {
    "id": "  %qT does not have a virtual destructor",
    "pattern": "  '(.+?)' does not have a virtual destructor",
    "replacement": "基类%q#T有一个非虚析构函数"
  },
  {
    "id": "  %qT is not an abstract class",
    "pattern": "  '(.+?)' is not an abstract class",
    "replacement": "%q#T不是一个类"
  },
  {
    "id": "  %qT is not a base of %qT",
    "pattern": "  '(.+?)' is not a base of '(.+?)'",
    "replacement": "%qT不是%qT的基类"
  },
  {
    "id": "  %qT is not a class",
    "pattern": "  '(.+?)' is not a class",
    "replacement": "%q#T不是一个类"
  },
  {
    "id": "  %qT is not an empty class",
    "pattern": "  '(.+?)' is not an empty class",
    "replacement": "%q#T不是一个类"
  },
  {
    "id": "  %qT is not an enum",
    "pattern": "  '(.+?)' is not an enum",
    "replacement": "%qT不是一个模板"
  },
  {
    "id": "  %qT is not a final class",
    "pattern": "  '(.+?)' is not a final class",
    "replacement": "%q#T不是一个类"
  },
  {
    "id": "  %qT is not layout compatible with %qT",
    "pattern": "  '(.+?)' is not layout compatible with '(.+?)'",
    "replacement": "选择%qD而不是%qD"
  },
  {
    "id": "  %qT is not a literal type",
    "pattern": "  '(.+?)' is not a literal type",
    "replacement": "%qT不是一个类"
  },
  {
    "id": "  %qT is not pointer-interconvertible base of %qT",
    "pattern": "  '(.+?)' is not pointer-interconvertible base of '(.+?)'",
    "replacement": "%qT是%qT的一个不可访问的基类"
  },
  {
    "id": "  %qT is not a POD type",
    "pattern": "  '(.+?)' is not a POD type",
    "replacement": "%qD不是一个类型"
  },
  {
    "id": "  %qT is not a polymorphic type",
    "pattern": "  '(.+?)' is not a polymorphic type",
    "replacement": "%qT不是一个类"
  },
  {
    "id": "  %qT is not the same as %qT",
    "pattern": "  '(.+?)' is not the same as '(.+?)'",
    "replacement": "%qT不是%qT的基类"
  },
  {
    "id": "  %qT is not an standard layout type",
    "pattern": "  '(.+?)' is not an standard layout type",
    "replacement": "%qT不是一个模板类型"
  },
  {
    "id": "  %qT is not a trivial type",
    "pattern": "  '(.+?)' is not a trivial type",
    "replacement": "%qT不是一个类"
  },
  {
    "id": "  %qT is not a union",
    "pattern": "  '(.+?)' is not a union",
    "replacement": "在函数%qs中"
  },
  {
    "id": "  %qT is not an aggregate",
    "pattern": "  '(.+?)' is not an aggregate",
    "replacement": "%qT不是一个模板"
  },
  {
    "id": "  %qT is not trivially copyable",
    "pattern": "  '(.+?)' is not trivially copyable",
    "replacement": "在%q#T和%q#T间比较"
  },
  {
    "id": "  %qT is not assignable from %qT",
    "pattern": "  '(.+?)' is not assignable from '(.+?)'",
    "replacement": "派生联合%qT无效"
  },
  {
    "id": "  %qT is not trivially assignable from %qT",
    "pattern": "  '(.+?)' is not trivially assignable from '(.+?)'",
    "replacement": "派生联合%qT无效"
  },
  {
    "id": "  %qT is not %<nothrow%> assignable from %qT",
    "pattern": "  '(.+?)' is not 'nothrow' assignable from '(.+?)'",
    "replacement": "派生联合%qT无效"
  },
  {
    "id": "  %qT is not default constructible",
    "pattern": "  '(.+?)' is not default constructible",
    "replacement": "类型%qE没有可以调用的默认构造函数"
  },
  {
    "id": "  %qT is not constructible from %qE",
    "pattern": "  '(.+?)' is not constructible from '(.+?)'",
    "replacement": "派生联合%qT无效"
  },
  {
    "id": "  %qT is not trivially constructible from %qE",
    "pattern": "  '(.+?)' is not trivially constructible from '(.+?)'",
    "replacement": "派生联合%qT无效"
  },
  {
    "id": "  %qT is not %<nothrow%> constructible from %qE",
    "pattern": "  '(.+?)' is not 'nothrow' constructible from '(.+?)'",
    "replacement": "派生联合%qT无效"
  },
  {
    "id": "  %qT does not have unique object representations",
    "pattern": "  '(.+?)' does not have unique object representations",
    "replacement": "new 声明中的表达式必须具有整数或枚举类型"
  },
  {
    "id": "invalid constraints",
    "pattern": "invalid constraints",
    "replacement": "%<#pragma pack%>中有无效常量 - 已忽略"
  },
  {
    "id": "constraint %qE has type %qT, not %<bool%>",
    "pattern": "constraint '(.+?)' has type '(.+?)', not 'bool'",
    "replacement": ""
  },
  {
    "id": "the expression %qE evaluated to %<false%>",
    "pattern": "the expression '(.+?)' evaluated to 'false'",
    "replacement": "用户定义的%qD总是计算所有两个参数"
  },
  {
    "id": "constraints not satisfied",
    "pattern": "constraints not satisfied",
    "replacement": "析构函数不能被 cv 限定"
  },
  {
    "id": "set %qs to at least %d for more detail",
    "pattern": "set '(.+?)' to at least (\\d+?) for more detail",
    "replacement": ""
  },
  {
    "id": "coroutines require a traits template; cannot find %<%E::%E%>",
    "pattern": "coroutines require a traits template; cannot find '(.+?)::(.+?)'",
    "replacement": ""
  },
  {
    "id": "perhaps %<#include <coroutine>%> is missing",
    "pattern": "perhaps '#include <coroutine>' is missing",
    "replacement": ""
  },
  {
    "id": "cannot instantiate %<coroutine traits%>",
    "pattern": "cannot instantiate 'coroutine traits'",
    "replacement": "不能内联%<main%>函数"
  },
  {
    "id": "coroutines require a handle class template; cannot find %<%E::%E%>",
    "pattern": "coroutines require a handle class template; cannot find '(.+?)::(.+?)'",
    "replacement": ""
  },
  {
    "id": "cannot instantiate a %<coroutine handle%> for promise type %qT",
    "pattern": "cannot instantiate a 'coroutine handle' for promise type '(.+?)'",
    "replacement": ""
  },
  {
    "id": "unable to find the promise type for this coroutine",
    "pattern": "unable to find the promise type for this coroutine",
    "replacement": "在类%qs中找不到可溢出的寄存器"
  },
  {
    "id": "the coroutine promise type %qT declares both %<return_value%> and %<return_void%>",
    "pattern": "the coroutine promise type '(.+?)' declares both 'return_value' and 'return_void'",
    "replacement": ""
  },
  {
    "id": "%<return_void%> declared here",
    "pattern": "'return_void' declared here",
    "replacement": "%qD在此声明"
  },
  {
    "id": "no member named %qE in %qT",
    "pattern": "no member named '(.+?)' in '(.+?)'",
    "replacement": "没有名为%q#T的类模板，在%q#T中 "
  },
  {
    "id": "%qs cannot be used outside a function",
    "pattern": "'(.+?)' cannot be used outside a function",
    "replacement": "%qE不能用作函数"
  },
  {
    "id": "%qs cannot be used in the %<main%> function",
    "pattern": "'(.+?)' cannot be used in the 'main' function",
    "replacement": "%qE不能用作函数"
  },
  {
    "id": "%qs cannot be used in a %<constexpr%> function",
    "pattern": "'(.+?)' cannot be used in a 'constexpr' function",
    "replacement": "%qE不能用作函数"
  },
  {
    "id": "%qs cannot be used in a function with a deduced return type",
    "pattern": "'(.+?)' cannot be used in a function with a deduced return type",
    "replacement": "虚函数不能是友元"
  },
  {
    "id": "%qs cannot be used in a varargs function",
    "pattern": "'(.+?)' cannot be used in a varargs function",
    "replacement": "%qE不能用作函数"
  },
  {
    "id": "%qs cannot be used in a constructor",
    "pattern": "'(.+?)' cannot be used in a constructor",
    "replacement": "%s 不能在这里用于 asm"
  },
  {
    "id": "%qs cannot be used in a destructor",
    "pattern": "'(.+?)' cannot be used in a destructor",
    "replacement": "%s 不能在这里用于 asm"
  },
  {
    "id": "a %<return%> statement is not allowed in coroutine; did you mean %<co_return%>?",
    "pattern": "a 'return' statement is not allowed in coroutine; did you mean 'co_return'\\?",
    "replacement": "在返回%qT的函数中，返回语句不带返回值"
  },
  {
    "id": "the expression %qE is required to be non-throwing",
    "pattern": "the expression '(.+?)' is required to be non-throwing",
    "replacement": "整型表达式%qE不是常量"
  },
  {
    "id": "must be declared with %<noexcept(true)%>",
    "pattern": "must be declared with 'noexcept\\(true\\)'",
    "replacement": ""
  },
  {
    "id": "awaitable type %qT is not a structure",
    "pattern": "awaitable type '(.+?)' is not a structure",
    "replacement": "限定的类型%qT不匹配析构函数名 ~%qT"
  },
  {
    "id": "%<await_suspend%> must return %<void%>, %<bool%> or a coroutine handle",
    "pattern": "'await_suspend' must return 'void', 'bool' or a coroutine handle",
    "replacement": ""
  },
  {
    "id": "function declared %<noreturn%> has a %<co_return%> statement",
    "pattern": "function declared 'noreturn' has a 'co_return' statement",
    "replacement": "被声明为%<noreturn%>的函数却有%<return%>语句"
  },
  {
    "id": "the align argument to %<__builtin_coro_promise%> must be a constant",
    "pattern": "the align argument to '__builtin_coro_promise' must be a constant",
    "replacement": "%<__builtin_prefetch%>的第三个实参必须是一个常量"
  },
  {
    "id": "the direction argument to %<__builtin_coro_promise%> must be a constant",
    "pattern": "the direction argument to '__builtin_coro_promise' must be a constant",
    "replacement": "%<__builtin_prefetch%>的第三个实参必须是一个常量"
  },
  {
    "id": "no suspend point info for %qD",
    "pattern": "no suspend point info for '(.+?)'",
    "replacement": "%qD先前没有原型"
  },
  {
    "id": "%qE is provided by %qT but is not usable with the function signature %qD",
    "pattern": "'(.+?)' is provided by '(.+?)' but is not usable with the function signature '(.+?)'",
    "replacement": ""
  },
  {
    "id": "duplicate info for %qE",
    "pattern": "duplicate info for '(.+?)'",
    "replacement": "重复的%qE"
  },
  {
    "id": "await expressions are not permitted in handlers",
    "pattern": "await expressions are not permitted in handlers",
    "replacement": "指针不能用作 case 常量"
  },
  {
    "id": "variable length arrays are not yet supported in coroutines",
    "pattern": "variable length arrays are not yet supported in coroutines",
    "replacement": "使用了变长数组"
  },
  {
    "id": "%qE is provided by %qT but %qE is not marked %<throw()%> or %<noexcept%>",
    "pattern": "'(.+?)' is provided by '(.+?)' but '(.+?)' is not marked 'throw\\(\\)' or 'noexcept'",
    "replacement": ""
  },
  {
    "id": "%qE is marked %<throw()%> or %<noexcept%> but no usable %<get_return_object_on_allocation_failure%> is provided by %qT",
    "pattern": "'(.+?)' is marked 'throw\\(\\)' or 'noexcept' but no usable 'get_return_object_on_allocation_failure' is provided by '(.+?)'",
    "replacement": ""
  },
  {
    "id": "%qE is provided by %qT but %<std::nothrow%> cannot be found",
    "pattern": "'(.+?)' is provided by '(.+?)' but 'std::nothrow' cannot be found",
    "replacement": ""
  },
  {
    "id": "cannot initialize a return object of type %qT with an rvalue of type %<void%>",
    "pattern": "cannot initialize a return object of type '(.+?)' with an rvalue of type 'void'",
    "replacement": "用类型为%2$qT的右值初始化类型为%1$qT的非常量引用无效"
  },
  {
    "id": "requires",
    "pattern": "requires",
    "replacement": "%qT作为%qs被引用"
  },
  {
    "id": "redefinition of default argument for %q+#D",
    "pattern": "redefinition of default argument for %q\\+#D",
    "replacement": "重定义%q#D的默认参数"
  },
  {
    "id": "  enters %<consteval if%> statement",
    "pattern": "  enters 'consteval if' statement",
    "replacement": "需要语句"
  },
  {
    "id": "%<--param destructive-interference-size=%d%> is less than %d",
    "pattern": "'--param destructive-interference-size=(\\d+?)' is less than (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%<--param destructive-interference-size=%d%> is less than %<--param l1-cache-line-size=%d%>",
    "pattern": "'--param destructive-interference-size=(\\d+?)' is less than '--param l1-cache-line-size=(\\d+?)'",
    "replacement": ""
  },
  {
    "id": "%<--param constructive-interference-size=%d%> is less than %d",
    "pattern": "'--param constructive-interference-size=(\\d+?)' is less than (\\d+?)",
    "replacement": ""
  },
  {
    "id": "%<--param constructive-interference-size=%d%> is greater than %<--param l1-cache-line-size=%d%>",
    "pattern": "'--param constructive-interference-size=(\\d+?)' is greater than '--param l1-cache-line-size=(\\d+?)'",
    "replacement": ""
  },
  {
    "id": "anonymous struct with base classes",
    "pattern": "anonymous struct with base classes",
    "replacement": "匿名结构不在有名类型内"
  },
  {
    "id": "%qD defined %<thread_local%> in %qs function only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "'(.+?)' defined 'thread_local' in '(.+?)' function only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x %<constexpr%>只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%qD defined %<static%> in %qs function only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "'(.+?)' defined 'static' in '(.+?)' function only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x %<constexpr%>只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%qD is not a direct member of %qT",
    "pattern": "'(.+?)' is not a direct member of '(.+?)'",
    "replacement": "%qD不是%qT的成员"
  },
  {
    "id": "while %qT decomposes into %E elements",
    "pattern": "while '(.+?)' decomposes into (.+?) elements",
    "replacement": ""
  },
  {
    "id": "initializer fails to determine size of %qT",
    "pattern": "initializer fails to determine size of '(.+?)'",
    "replacement": "初始化器无法确定 '$1' 的大小"
  },
  {
    "id": "array size missing in %qT",
    "pattern": "array size missing in '(.+?)'",
    "replacement": "'$1' 中缺少数组大小"
  },
  {
    "id": "zero-size array %qT",
    "pattern": "zero-size array '(.+?)'",
    "replacement": "大小为零的数组 '$1'"
  },
  {
    "id": "deduction guide %qD must have the same access as %qT",
    "pattern": "deduction guide '(.+?)' must have the same access as '(.+?)'",
    "replacement": "%qD的特例化必须出现在命名空间内"
  },
  {
    "id": "%qD declared as array of template placeholder type %qT",
    "pattern": "'(.+?)' declared as array of template placeholder type '(.+?)'",
    "replacement": "成员函数%qD未在%qT中声明"
  },
  {
    "id": "creating array of template placeholder type %qT",
    "pattern": "creating array of template placeholder type '(.+?)'",
    "replacement": "生成引用类型%qT的成员指针"
  },
  {
    "id": "variable-length array of %<auto%>",
    "pattern": "variable-length array of 'auto'",
    "replacement": "使用了变长数组"
  },
  {
    "id": "invalid use of qualified-name %<%D::%D%>",
    "pattern": "invalid use of qualified-name '(\\d+?)::(\\d+?)'",
    "replacement": "对限定名%<%D::%D%>的使用无效"
  },
  {
    "id": "declaration of %qD as non-function",
    "pattern": "declaration of '(.+?)' as non-function",
    "replacement": "'$1' 声明为非函数"
  },
  {
    "id": "an attribute that appertains to a friend declaration that is not a definition is ignored",
    "pattern": "an attribute that appertains to a friend declaration that is not a definition is ignored",
    "replacement": "类型在非前向声明的详尽类型限定符中被忽略"
  },
  {
    "id": "%qT has a previous declaration here",
    "pattern": "'(.+?)' has a previous declaration here",
    "replacement": "'$1' 之前在此声明"
  },
  {
    "id": "class template %qD redeclared as non-template",
    "pattern": "class template '(.+?)' redeclared as non-template",
    "replacement": "函数模板%qD重声明为类模板"
  },
  {
    "id": "top-level comma expression in array subscript changed meaning in C++23",
    "pattern": "top-level comma expression in array subscript changed meaning in C\\+\\+23",
    "replacement": ""
  },
  {
    "id": "built-in subscript operator without expression list",
    "pattern": "built-in subscript operator without expression list",
    "replacement": ""
  },
  {
    "id": "built-in subscript operator with more than one expression in expression list",
    "pattern": "built-in subscript operator with more than one expression in expression list",
    "replacement": ""
  },
  {
    "id": "bit-field %qD with non-integral type %qT",
    "pattern": "bit-field '(.+?)' with non-integral type '(.+?)'",
    "replacement": "位域 '$1' 的类型 '$2' 不是整数"
  },
  {
    "id": "%<omp::%E%> not allowed to be specified in this context",
    "pattern": "'omp::(.+?)' not allowed to be specified in this context",
    "replacement": "%<this%>不能用在此上下文中"
  },
  {
    "id": "C++11 attributes only available with %<-std=c++11%> or %<-std=gnu++11%>",
    "pattern": "C\\+\\+11 attributes only available with '-std=c\\+\\+11' or '-std=gnu\\+\\+11'",
    "replacement": "C++0x auto 只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%qD is not a member of %qD; did you mean %qs?",
    "pattern": "'(.+?)' is not a member of '(.+?)'; did you mean '(.+?)'\\?",
    "replacement": "'$1' 没有名为 '$2' 的成员；你的意思是 '$3' 吗？"
  },
  {
    "id": "%qD is not a member of %qD",
    "pattern": "'(.+?)' is not a member of '(.+?)'",
    "replacement": "'$1' 不是 '$2' 的成员"
  },
  {
    "id": "%qT is already a friend of %qT",
    "pattern": "'(.+?)' is already a friend of '(.+?)'",
    "replacement": "'$1' 已经是 '$2' 的友元"
  },
  {
    "id": "reference %qD is not yet bound to a value when used here",
    "pattern": "reference '(.+?)' is not yet bound to a value when used here",
    "replacement": ""
  },
  {
    "id": "member %qD is used uninitialized",
    "pattern": "member '(.+?)' is used uninitialized",
    "replacement": "成员%qD是未初始化的引用"
  },
  {
    "id": "the mangled name of %qD changes between %<%s=%d%> (%qD) and %<%s=%d%> (%qD)",
    "pattern": "the mangled name of '(.+?)' changes between '(.+?)=(\\d+?)' \\('(.+?)'\\) and '(.+?)=(\\d+?)' \\('(.+?)'\\)",
    "replacement": "%qD修饰后的名字将在 GCC 的未来版本中有变化"
  },
  {
    "id": "failed %s mapper %qs line %u",
    "pattern": "failed (.+?) mapper '(.+?)' line (\\d+?)",
    "replacement": ""
  },
  {
    "id": "failed %s mapper %qs",
    "pattern": "failed (.+?) mapper '(.+?)'",
    "replacement": ""
  },
  {
    "id": "failed mapper handshake %s",
    "pattern": "failed mapper handshake (.+?)",
    "replacement": ""
  },
  {
    "id": "mapper died by signal %s",
    "pattern": "mapper died by signal (.+?)",
    "replacement": ""
  },
  {
    "id": "mapper exit status %d",
    "pattern": "mapper exit status (\\d+?)",
    "replacement": "%s(%s) 短脚本运行失败，离开状态 %d\\n"
  },
  {
    "id": "section %qs is missing or corrupted",
    "pattern": "section '(.+?)' is missing or corrupted",
    "replacement": "在 %s %s 中有缺失的“%s”\\n"
  },
  {
    "id": "section #%u is missing or corrupted",
    "pattern": "section #(\\d+?) is missing or corrupted",
    "replacement": "在 %s %s 中有缺失的“%s”\\n"
  },
  {
    "id": "not Encapsulated Lazy Records of Named Declarations",
    "pattern": "not Encapsulated Lazy Records of Named Declarations",
    "replacement": ""
  },
  {
    "id": "unexpected encapsulation format or type",
    "pattern": "unexpected encapsulation format or type",
    "replacement": "需要模板 ID"
  },
  {
    "id": "encapsulation is malformed",
    "pattern": "encapsulation is malformed",
    "replacement": ""
  },
  {
    "id": "conflicting global module declaration %#qD",
    "pattern": "conflicting global module declaration '(.+?)'",
    "replacement": "相互冲突的声明%q#D"
  },
  {
    "id": "existing declaration %#qD",
    "pattern": "existing declaration '(.+?)'",
    "replacement": "在声明%q+D中"
  },
  {
    "id": "definition of %qD does not match",
    "pattern": "definition of '(.+?)' does not match",
    "replacement": "%q#D的外部声明不匹配"
  },
  {
    "id": "existing definition %qD",
    "pattern": "existing definition '(.+?)'",
    "replacement": "定义缺失"
  },
  {
    "id": "... this enumerator %qD",
    "pattern": "\\.\\.\\. this enumerator '(.+?)'",
    "replacement": "枚举%q+D重声明"
  },
  {
    "id": "enumerator %qD does not match ...",
    "pattern": "enumerator '(.+?)' does not match \\.\\.\\.",
    "replacement": "%q#D的外部声明不匹配"
  },
  {
    "id": "additional enumerators beginning with %qD",
    "pattern": "additional enumerators beginning with '(.+?)'",
    "replacement": ""
  },
  {
    "id": "enumeration range differs",
    "pattern": "enumeration range differs",
    "replacement": ""
  },
  {
    "id": "%q#D references internal linkage entity %q#D",
    "pattern": "'(.+?)' references internal linkage entity '(.+?)'",
    "replacement": ""
  },
  {
    "id": "recursive lazy load",
    "pattern": "recursive lazy load",
    "replacement": ""
  },
  {
    "id": "cannot import module in its own purview",
    "pattern": "cannot import module in its own purview",
    "replacement": ""
  },
  {
    "id": "module %qs declared here",
    "pattern": "module '(.+?)' declared here",
    "replacement": "%qD在此声明"
  },
  {
    "id": "indirect import %qs is not already loaded",
    "pattern": "indirect import '(.+?)' is not already loaded",
    "replacement": ""
  },
  {
    "id": "import %qs has CRC mismatch",
    "pattern": "import '(.+?)' has CRC mismatch",
    "replacement": ""
  },
  {
    "id": "unable to represent further imported source locations",
    "pattern": "unable to represent further imported source locations",
    "replacement": ""
  },
  {
    "id": "not exporting %<#define %E%> as it is a keyword",
    "pattern": "not exporting '#define (.+?)' as it is a keyword",
    "replacement": ""
  },
  {
    "id": "macro definitions of %qE corrupted",
    "pattern": "macro definitions of '(.+?)' corrupted",
    "replacement": "%q+D的上一个定义在此"
  },
  {
    "id": "inconsistent imported macro definition %qE",
    "pattern": "inconsistent imported macro definition '(.+?)'",
    "replacement": "对%qT不一致的演绎：先是%qT然后是%qT"
  },
  {
    "id": "compiled module file is %qs",
    "pattern": "compiled module file is '(.+?)'",
    "replacement": "%s：无法找到模块文件 %s\\n"
  },
  {
    "id": "compiled module is %sversion %s",
    "pattern": "compiled module is (.+?)version (.+?)",
    "replacement": "显示编译器版本"
  },
  {
    "id": "compiler is %sversion %s%s%s",
    "pattern": "compiler is (.+?)version (.+?)(.+?)(.+?)",
    "replacement": "collect2 版本 %s\\n"
  },
  {
    "id": "module %qs found",
    "pattern": "module '(.+?)' found",
    "replacement": "找不到 %qs 的取值器"
  },
  {
    "id": "header module expected, module %qs found",
    "pattern": "header module expected, module '(.+?)' found",
    "replacement": ""
  },
  {
    "id": "module %qs expected, header module found",
    "pattern": "module '(.+?)' expected, header module found",
    "replacement": ""
  },
  {
    "id": "module %qs CRC mismatch",
    "pattern": "module '(.+?)' CRC mismatch",
    "replacement": ""
  },
  {
    "id": "target & host is %qs:%qs, expected %qs:%qs",
    "pattern": "target & host is '(.+?)':'(.+?)', expected '(.+?)':'(.+?)'",
    "replacement": ""
  },
  {
    "id": "language dialect differs %qs, expected %qs",
    "pattern": "language dialect differs '(.+?)', expected '(.+?)'",
    "replacement": ""
  },
  {
    "id": "module contains OpenMP, use %<-fopenmp%> to enable",
    "pattern": "module contains OpenMP, use '-fopenmp' to enable",
    "replacement": "异常处理已被禁用，使用 -fexceptions 启用"
  },
  {
    "id": "fixed tree mismatch",
    "pattern": "fixed tree mismatch",
    "replacement": "函数属性不匹配"
  },
  {
    "id": "interface partition is not exported",
    "pattern": "interface partition is not exported",
    "replacement": "不支持堆栈限制表达式"
  },
  {
    "id": "failed to read compiled module cluster %u: %s",
    "pattern": "failed to read compiled module cluster (\\d+?): (.+?)",
    "replacement": ""
  },
  {
    "id": "failed to read compiled module: %s",
    "pattern": "failed to read compiled module: (.+?)",
    "replacement": "找不到类‘%s’"
  },
  {
    "id": "consider using %<-fno-module-lazy%>, increasing %<-param-lazy-modules=%u%> value, or increasing the per-process file descriptor limit",
    "pattern": "consider using '-fno-module-lazy', increasing '-param-lazy-modules=(\\d+?)' value, or increasing the per-process file descriptor limit",
    "replacement": ""
  },
  {
    "id": "imports must be built before being imported",
    "pattern": "imports must be built before being imported",
    "replacement": ""
  },
  {
    "id": "returning to the gate for a mechanical issue",
    "pattern": "returning to the gate for a mechanical issue",
    "replacement": ""
  },
  {
    "id": "reading CMI %qs",
    "pattern": "reading CMI '(.+?)'",
    "replacement": "正在创建 '%s'\\n"
  },
  {
    "id": "failed to load binding %<%E%s%E%>",
    "pattern": "failed to load binding '(.+?)(.+?)(.+?)'",
    "replacement": ""
  },
  {
    "id": "failed to load binding %<%E%s%E@%s%>",
    "pattern": "failed to load binding '(.+?)(.+?)(.+?)@(.+?)'",
    "replacement": ""
  },
  {
    "id": "during load of binding %<%E%s%E%>",
    "pattern": "during load of binding '(.+?)(.+?)(.+?)'",
    "replacement": ""
  },
  {
    "id": "during load of binding %<%E%s%E@%s%>",
    "pattern": "during load of binding '(.+?)(.+?)(.+?)@(.+?)'",
    "replacement": ""
  },
  {
    "id": "failed to load pendings for %<%E%s%E%>",
    "pattern": "failed to load pendings for '(.+?)(.+?)(.+?)'",
    "replacement": ""
  },
  {
    "id": "during load of pendings for %<%E%s%E%>",
    "pattern": "during load of pendings for '(.+?)(.+?)(.+?)'",
    "replacement": "未知的选项：%s %s %s"
  },
  {
    "id": "import of named module %qs inside language-linkage block",
    "pattern": "import of named module '(.+?)' inside language-linkage block",
    "replacement": ""
  },
  {
    "id": "module already declared",
    "pattern": "module already declared",
    "replacement": "`%.*s' 已被定义为对照符号"
  },
  {
    "id": "module already imported",
    "pattern": "module already imported",
    "replacement": "模块过程"
  },
  {
    "id": "module %qs imported here",
    "pattern": "module '(.+?)' imported here",
    "replacement": "模块过程"
  },
  {
    "id": "unknown Compiled Module Interface: %s",
    "pattern": "unknown Compiled Module Interface: (.+?)",
    "replacement": "PRINT_OPERAND：未知的标点‘%c’"
  },
  {
    "id": "cannot determine %<#include%> translation of %s: %s",
    "pattern": "cannot determine '#include' translation of (.+?): (.+?)",
    "replacement": ""
  },
  {
    "id": "include %qs translated to import",
    "pattern": "include '(.+?)' translated to import",
    "replacement": ""
  },
  {
    "id": "include %qs processed textually",
    "pattern": "include '(.+?)' processed textually",
    "replacement": ""
  },
  {
    "id": "C++ modules are incompatible with precompiled headers",
    "pattern": "C\\+\\+ modules are incompatible with precompiled headers",
    "replacement": ""
  },
  {
    "id": "C++ modules are incompatible with traditional preprocessing",
    "pattern": "C\\+\\+ modules are incompatible with traditional preprocessing",
    "replacement": "启用传统预处理。"
  },
  {
    "id": "macro debug output may be incomplete with modules",
    "pattern": "macro debug output may be incomplete with modules",
    "replacement": ""
  },
  {
    "id": "module dependencies require preprocessing",
    "pattern": "module dependencies require preprocessing",
    "replacement": ""
  },
  {
    "id": "you should use the %<-%s%> option",
    "pattern": "you should use the '-(.+?)' option",
    "replacement": ""
  },
  {
    "id": "invalid header name %qs",
    "pattern": "invalid header name '(.+?)'",
    "replacement": "无效的 --param 值%qs"
  },
  {
    "id": "invalid module name %qs",
    "pattern": "invalid module name '(.+?)'",
    "replacement": "无效的 --param 值%qs"
  },
  {
    "id": "%<-fmodule-only%> used for non-interface",
    "pattern": "'-fmodule-only' used for non-interface",
    "replacement": ""
  },
  {
    "id": "writing CMI %qs",
    "pattern": "writing CMI '(.+?)'",
    "replacement": "写入%qs时错误"
  },
  {
    "id": "not writing module %qs due to errors",
    "pattern": "not writing module '(.+?)' due to errors",
    "replacement": "写入模块文件时出错：%s"
  },
  {
    "id": "failed to write compiled module: %s",
    "pattern": "failed to write compiled module: (.+?)",
    "replacement": "找不到类‘%s’"
  },
  {
    "id": "unknown header kind %qs",
    "pattern": "unknown header kind '(.+?)'",
    "replacement": "spec 函数名格式错误"
  },
  {
    "id": "%<declare %s%> directive not immediately followed by function declaration or definition",
    "pattern": "'declare (.+?)' directive not immediately followed by function declaration or definition",
    "replacement": "%<#pragma align%>必须出现在 %D 的声明之前，忽略"
  },
  {
    "id": "%<%T::%E%> has not been declared",
    "pattern": "'(.+?)::(.+?)' has not been declared",
    "replacement": "'$1::$2' 尚未声明"
  },
  {
    "id": "concatenation of string literals with conflicting encoding prefixes",
    "pattern": "concatenation of string literals with conflicting encoding prefixes",
    "replacement": ""
  },
  {
    "id": "expected %qs keyword before dependent template name",
    "pattern": "expected '(.+?)' keyword before dependent template name",
    "replacement": ""
  },
  {
    "id": "wrong number of arguments to %<__builtin_assoc_barrier%>",
    "pattern": "wrong number of arguments to '__builtin_assoc_barrier'",
    "replacement": "给函数%<__builtin_next_arg%>的参数数目不对"
  },
  {
    "id": "wrong number of arguments to %<__builtin_shufflevector%>",
    "pattern": "wrong number of arguments to '__builtin_shufflevector'",
    "replacement": "给函数%<__builtin_next_arg%>的参数数目不对"
  },
  {
    "id": "explicit by-copy capture of %<this%> with by-copy capture default only available with %<-std=c++20%> or %<-std=gnu++20%>",
    "pattern": "explicit by-copy capture of 'this' with by-copy capture default only available with '-std=c\\+\\+20' or '-std=gnu\\+\\+20'",
    "replacement": "C++0x auto 只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "mixing OpenMP directives with attribute and pragma syntax on the same statement",
    "pattern": "mixing OpenMP directives with attribute and pragma syntax on the same statement",
    "replacement": ""
  },
  {
    "id": "unknown OpenMP directive name in %<omp::directive%> attribute argument",
    "pattern": "unknown OpenMP directive name in 'omp::directive' attribute argument",
    "replacement": ""
  },
  {
    "id": "OpenMP construct among %<omp::directive%> attributes requires all %<omp::directive%> attributes on the same statement to be in the same %<omp::sequence%>",
    "pattern": "OpenMP construct among 'omp::directive' attributes requires all 'omp::directive' attributes on the same statement to be in the same 'omp::sequence'",
    "replacement": ""
  },
  {
    "id": "multiple OpenMP standalone directives among %<omp::directive%> attributes must be all within the same %<omp::sequence%>",
    "pattern": "multiple OpenMP standalone directives among 'omp::directive' attributes must be all within the same 'omp::sequence'",
    "replacement": ""
  },
  {
    "id": "standalone OpenMP directives in %<omp::directive%> attribute can only appear on an empty statement",
    "pattern": "standalone OpenMP directives in 'omp::directive' attribute can only appear on an empty statement",
    "replacement": ""
  },
  {
    "id": "mixing OpenMP directives with attribute and pragma syntax on the same declaration",
    "pattern": "mixing OpenMP directives with attribute and pragma syntax on the same declaration",
    "replacement": ""
  },
  {
    "id": "%<%T::%D%> names the constructor, not the type",
    "pattern": "'(.+?)::(\\d+?)' names the constructor, not the type",
    "replacement": "%<%T::%D%>命名了一个构造函数而非类型"
  },
  {
    "id": "%<if consteval%> only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "'if consteval' only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x %<constexpr%>只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%<if consteval%> requires compound statement",
    "pattern": "'if consteval' requires compound statement",
    "replacement": "asm 语句中需要左值"
  },
  {
    "id": "alias-declaration in init-statement only available with %<-std=c++23%> or %<-std=gnu++23%>",
    "pattern": "alias-declaration in init-statement only available with '-std=c\\+\\+23' or '-std=gnu\\+\\+23'",
    "replacement": "可变参数模板只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%<goto%> in %<constexpr%> function only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "'goto' in 'constexpr' function only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x %<constexpr%>只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%qD invalid in condition",
    "pattern": "'(.+?)' invalid in condition",
    "replacement": "%s：无效的新列指定符号“%s”\\n"
  },
  {
    "id": "standard attributes in middle of decl-specifiers",
    "pattern": "standard attributes in middle of decl-specifiers",
    "replacement": ""
  },
  {
    "id": "standard attributes must precede the decl-specifiers to apply to the declaration, or follow them to apply to the type",
    "pattern": "standard attributes must precede the decl-specifiers to apply to the declaration, or follow them to apply to the type",
    "replacement": ""
  },
  {
    "id": "use of %<auto%> in parameter declaration only available with %<-std=c++20%> or %<-fconcepts%>",
    "pattern": "use of 'auto' in parameter declaration only available with '-std=c\\+\\+20' or '-fconcepts'",
    "replacement": "默认化和被删除的函数只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "types may not be defined in enum-base",
    "pattern": "types may not be defined in enum-base",
    "replacement": "类型不能定义在类型转换中"
  },
  {
    "id": "unexpanded parameter pack in enumerator in lambda",
    "pattern": "unexpanded parameter pack in enumerator in lambda",
    "replacement": ""
  },
  {
    "id": "invalid use of %qT",
    "pattern": "invalid use of '(.+?)'",
    "replacement": "非法地使用了 '$1'"
  },
  {
    "id": "unexpanded parameter pack in local class in lambda",
    "pattern": "unexpanded parameter pack in local class in lambda",
    "replacement": ""
  },
  {
    "id": "expected OpenMP directive name",
    "pattern": "expected OpenMP directive name",
    "replacement": "需要函数"
  },
  {
    "id": "expected attribute argument as balanced token sequence",
    "pattern": "expected attribute argument as balanced token sequence",
    "replacement": "需要类型%qT，但实参的类型为%qT"
  },
  {
    "id": "expected %<directive%> or %<sequence%>",
    "pattern": "expected 'directive' or 'sequence'",
    "replacement": "需要%<none%>或%<shared%>"
  },
  {
    "id": "%<omp::%E%> attribute requires argument",
    "pattern": "'omp::(.+?)' attribute requires argument",
    "replacement": "%qE属性需要带有名实参的原型"
  },
  {
    "id": "testing if a concept-id is a valid expression; add %<requires%> to check satisfaction",
    "pattern": "testing if a concept-id is a valid expression; add 'requires' to check satisfaction",
    "replacement": ""
  },
  {
    "id": "duplicate %qs",
    "pattern": "duplicate '(.+?)'",
    "replacement": "重复的 '$1'"
  },
  {
    "id": "%<[[omp::directive(%s)]]%> must be the only specified attribute on a statement",
    "pattern": "'\\[\\[omp::directive\\((.+?)\\)\\]\\]' must be the only specified attribute on a statement",
    "replacement": ""
  },
  {
    "id": "OpenMP directive other than %<declare simd%> or %<declare variant%> appertains to a declaration",
    "pattern": "OpenMP directive other than 'declare simd' or 'declare variant' appertains to a declaration",
    "replacement": ""
  },
  {
    "id": "%<declare target%> in attribute syntax terminated with %<end declare target%> in pragma syntax",
    "pattern": "'declare target' in attribute syntax terminated with 'end declare target' in pragma syntax",
    "replacement": ""
  },
  {
    "id": "%<declare target%> in pragma syntax terminated with %<end declare target%> in attribute syntax",
    "pattern": "'declare target' in pragma syntax terminated with 'end declare target' in attribute syntax",
    "replacement": ""
  },
  {
    "id": "%<atomic_cancel%>",
    "pattern": "'atomic_cancel'",
    "replacement": ""
  },
  {
    "id": "  from definition of %q#D",
    "pattern": "  from definition of '(.+?)'",
    "replacement": "  从%q+#D的定义"
  },
  {
    "id": "specialization of %qD after instantiation",
    "pattern": "specialization of '(.+?)' after instantiation",
    "replacement": "'$1' 在其实例化后特化"
  },
  {
    "id": "%s %#qD",
    "pattern": "(.+?) '(.+?)'",
    "replacement": "%s%#D"
  },
  {
    "id": "missing primary template attribute %s",
    "pattern": "missing primary template attribute (.+?)",
    "replacement": "以前在此声明过"
  },
  {
    "id": "expansion pattern %qE contains no parameter packs",
    "pattern": "expansion pattern '(.+?)' contains no parameter packs",
    "replacement": "模式展开 '$1' 不包含形参包"
  },
  {
    "id": "parameter pack argument %qT must be at the end of the template argument list",
    "pattern": "parameter pack argument '(.+?)' must be at the end of the template argument list",
    "replacement": "形参包实参 '$1' 必须出现在模板实参表末尾"
  },
  {
    "id": "got %d template parameters for %q#T",
    "pattern": "got (\\d+?) template parameters for '(.+?)'",
    "replacement": "%2$q#T得到了 %1$d 个模板参数"
  },
  {
    "id": "  expected a type, got %qT",
    "pattern": "  expected a type, got '(.+?)'",
    "replacement": "  期望一个类型，却得到了 '$1'"
  },
  {
    "id": "  expected a class template, got %qT",
    "pattern": "  expected a class template, got '(.+?)'",
    "replacement": "  期望一个类模板，却得到了 '$1'"
  },
  {
    "id": "mismatched argument pack lengths while expanding %qE",
    "pattern": "mismatched argument pack lengths while expanding '(.+?)'",
    "replacement": "展开 '$1' 时形参包长度不匹配"
  },
  {
    "id": "%qD is not a class or namespace",
    "pattern": "'(.+?)' is not a class or namespace",
    "replacement": "'$1' 不是类或命名空间"
  },
  {
    "id": "ambiguous template instantiation for %q#D",
    "pattern": "ambiguous template instantiation for '(.+?)'",
    "replacement": "'$1' 的模板实例化有歧义"
  },
  {
    "id": "duplicate explicit instantiation of %q#T",
    "pattern": "duplicate explicit instantiation of '(.+?)'",
    "replacement": "对 '$1' 重复的显式实例化"
  },
  {
    "id": "concept %qE has multiple template parameter lists",
    "pattern": "concept '(.+?)' has multiple template parameter lists",
    "replacement": "在模板参数列表中定义了%q#T"
  },
  {
    "id": "use %qD directly instead",
    "pattern": "use '(.+?)' directly instead",
    "replacement": "改用 #include"
  },
  {
    "id": "overridden function is %q#D",
    "pattern": "overridden function is '(.+?)'",
    "replacement": "被覆盖的函数是 '$1'"
  },
  {
    "id": "invalid covariant return type for %q+#D",
    "pattern": "invalid covariant return type for '(.+?)'",
    "replacement": "'$1' 的协变返回类型无效"
  },
  {
    "id": "overridden function is %qD",
    "pattern": "overridden function is '(.+?)'",
    "replacement": "被覆盖的函数是 '$1'"
  },
  {
    "id": "%<std::is_constant_evaluated%> always evaluates to true in %<if constexpr%>",
    "pattern": "'std::is_constant_evaluated' always evaluates to true in 'if constexpr'",
    "replacement": ""
  },
  {
    "id": "%<std::is_constant_evaluated%> always evaluates to false in a non-%<constexpr%> function",
    "pattern": "'std::is_constant_evaluated' always evaluates to false in a non-'constexpr' function",
    "replacement": ""
  },
  {
    "id": "%<std::is_constant_evaluated%> always evaluates to true in a %<consteval%> function",
    "pattern": "'std::is_constant_evaluated' always evaluates to true in a 'consteval' function",
    "replacement": ""
  },
  {
    "id": "%<auto{x}%> cannot be constrained",
    "pattern": "'auto\\{x\\}' cannot be constrained",
    "replacement": "不能内联%<main%>函数"
  },
  {
    "id": "%<auto{x}%> only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "'auto\\{x\\}' only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "C++0x auto 只在 -std=c++0x 或 -std=gnu++0x 下可用"
  },
  {
    "id": "%qD is not lvalue expression nor array section in %qs clause",
    "pattern": "'(.+?)' is not lvalue expression nor array section in '(.+?)' clause",
    "replacement": "%qD在子句%qs中不是一个变量"
  },
  {
    "id": "%<filter%> expression must be integral",
    "pattern": "'filter' expression must be integral",
    "replacement": "num_threads 表达式必须是整型的"
  },
  {
    "id": "the comparison reduces to %qE",
    "pattern": "the comparison reduces to '(.+?)'",
    "replacement": "%qE实参太多"
  },
  {
    "id": "%<__builtin_is_pointer_interconvertible_with_class%> needs a single argument",
    "pattern": "'__builtin_is_pointer_interconvertible_with_class' needs a single argument",
    "replacement": ""
  },
  {
    "id": "%<__builtin_is_pointer_interconvertible_with_class%> argument is not pointer to member",
    "pattern": "'__builtin_is_pointer_interconvertible_with_class' argument is not pointer to member",
    "replacement": "'__builtin_is_pointer_interconvertible_with_class' 实参不是指向成员的指针"
  },
  {
    "id": "%<__builtin_is_corresponding_member%> not well defined for anonymous unions",
    "pattern": "'__builtin_is_corresponding_member' not well defined for anonymous unions",
    "replacement": "'__builtin_is_corresponding_member' 对于匿名联合体没有良定义"
  },
  {
    "id": "%<__builtin_is_corresponding_member%> needs two arguments",
    "pattern": "'__builtin_is_corresponding_member' needs two arguments",
    "replacement": "'__builtin_is_corresponding_member' 需要两个实参"
  },
  {
    "id": "%<__builtin_is_corresponding_member%> argument is not pointer to member",
    "pattern": "'__builtin_is_corresponding_member' argument is not pointer to member",
    "replacement": "'__builtin_is_corresponding_member' 的实参不是指向成员的指针"
  },
  {
    "id": "%qD cannot be used as a function",
    "pattern": "'(.+?)' cannot be used as a function",
    "replacement": "'$1' 不能被用作函数"
  },
  {
    "id": "the address %qE will never be NULL",
    "pattern": "the address '(.+?)' will never be NULL",
    "replacement": "'$1' 的地址永远不会为 NULL"
  },
  {
    "id": "comparing the result of pointer addition %qE and NULL",
    "pattern": "comparing the result of pointer addition '(.+?)' and NULL",
    "replacement": "将 NULL 与指针加法 '$1' 比较"
  },
  {
    "id": "%<auto(x)%> cannot be constrained",
    "pattern": "'auto\\(x\\)' cannot be constrained",
    "replacement": "'auto(x)' 不能被约束"
  },
  {
    "id": "%<auto(x)%> only available with %<-std=c++2b%> or %<-std=gnu++2b%>",
    "pattern": "'auto\\(x\\)' only available with '-std=c\\+\\+2b' or '-std=gnu\\+\\+2b'",
    "replacement": "'auto(x)' 仅在 '-std=c++2b' 或 '-std=gnu++2b' 下可用"
  }
]